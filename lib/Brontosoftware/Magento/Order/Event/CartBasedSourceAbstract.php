<?php
/**
 * This file was generated by the ConvertToLegacy class in bronto-legacy.
 * The purpose of the conversion was to maintain PSR-0 compliance while
 * the main development focuses on modern styles found in PSR-4.
 *
 * For the original:
 * @see src/Bronto/Magento/Order/Event/CartBasedSourceAbstract.php
 */

abstract class Brontosoftware_Magento_Order_Event_CartBasedSourceAbstract implements Brontosoftware_Magento_Connector_Event_SourceInterface, Brontosoftware_Magento_Connector_Event_ContextProviderInterface
{
    protected $_connector;
    protected $_helper;
    protected $_cookie;

    /**
     * @param Brontosoftware_Magento_Connector_SettingsInterface $connector
     * @param Brontosoftware_Magento_Order_SettingsInterface $helper
     * @param Brontosoftware_Magento_Core_Cookie_ReaderInterface $cookie
     */
    public function __construct(
        Brontosoftware_Magento_Connector_SettingsInterface $connector,
        Brontosoftware_Magento_Order_SettingsInterface $helper,
        Brontosoftware_Magento_Core_Cookie_ReaderInterface $cookie
    ) {
        $this->_connector = $connector;
        $this->_helper = $helper;
        $this->_cookie = $cookie;
    }

    /**
     * @see parent
     */
    public function transform($object)
    {
        $lineItems = array();
        foreach ($this->_helper->getFlatItems($object) as $lineItem) {
            $price = $this->_helper->getItemPrice($lineItem);
            $discountAmount = $this->_helper->getItemDiscount($lineItem);
            $lineItems[] = array(
                'sku' => $lineItem->getSku(),
                'name' => $this->_helper->getItemName($lineItem),
                'category' => $this->_helper->getItemCategories($lineItem),
                'productUrl' => $this->_helper->getItemUrl($lineItem),
                'imageUrl' => $this->_helper->getItemImage($lineItem),
                'description' => $this->_helper->getItemDescription($lineItem),
                'totalPrice' => $this->_helper->getItemRowTotal($lineItem),
                'quantity' => is_null($lineItem->getQtyOrdered()) ? $lineItem->getQty() : $lineItem->getQtyOrdered(),
                'unitPrice' => $price,
                'salePrice' => $price - ($discountAmount ? $discountAmount : 0),
                'other' => $this->_helper->getItemOtherField($lineItem)
            );
        }
        $shipment = $this->_helper->createShippingItem($object);
        if (!empty($shipment)) {
            $lineItems[] = $shipment;
        }
        $isBase = $this->_helper->isBasePrice('store', $object->getStoreId());
        $data = $this->_initializeData($object, $isBase);
        $data += array(
            'grandTotal' => $isBase ? $object->getBaseGrandTotal() : $object->getGrandTotal(),
            'subtotal' => $isBase ? $object->getBaseSubtotal() : $object->getSubtotal(),
            'discountAmount' => abs($isBase ? $object->getBaseDiscountAmount() : $object->getDiscountAmount()),
            'taxAmount' => $isBase ? $object->getBaseTaxAmount() : $object->getTaxAmount(),
            'originIp' => $object->getRemoteIp(),
            'lineItems' => $lineItems
        );
        $isQueued = $this->_connector->isEventQueued('store', $object->getStoreId());
        if ($isQueued && $object->hasBrontoTid()) {
            $data['tid'] = $object->getBrontoTid();
        } else if (!$isQueued) {
            $data['tid'] = $this->_readCookie($object);
        }
        return $data;
    }

    /**
     * Implementors will create JSON data to match requset
     *
     * @param mixed $object
     * @param boolean $isBase
     * @return array
     */
    protected abstract function _initializeData($object, $isBase);

    /**
     * Forcefully reads a cookie parameter off of the request
     *
     * @param mixed $object
     * @return mixed
     */
    protected function _readCookie($object)
    {
        $tid = $this->_helper->getTidHash('store', $object->getStoreId());
        return $this->_cookie->getCookie("tid_{$tid}", $this->_fallbackTid());
    }

    /**
     * Used to get the default tracking cookie
     *
     * @return string
     */
    protected function _fallbackTid()
    {
        foreach ($_COOKIE as $name => $value) {
            if (preg_match('/^tid_/', $name)) {
                return $value;
            }
        }
        return null;
    }
}
