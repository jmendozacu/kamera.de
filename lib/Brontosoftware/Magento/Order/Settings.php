<?php
/**
 * This file was generated by the ConvertToLegacy class in bronto-legacy.
 * The purpose of the conversion was to maintain PSR-0 compliance while
 * the main development focuses on modern styles found in PSR-4.
 *
 * For the original:
 * @see src/Bronto/Magento/Order/Settings.php
 */

class Brontosoftware_Magento_Order_Settings extends Brontosoftware_Magento_Core_Config_ContainerAbstract implements Brontosoftware_Magento_Order_SettingsInterface
{
    const SHIPPING_SKU = 'SHIPPING';

    protected $_settings;
    protected $_productRepo;

    /**
     * @param Brontosoftware_Magento_Core_Config_ScopedInterface $config
     * @param Brontosoftware_Magento_Connector_SettingsInterface $settings
     * @param Brontosoftware_Magento_Core_Catalog_ProductCacheInterface $productRepo
     */
    public function __construct(
        Brontosoftware_Magento_Core_Config_ScopedInterface $config,
        Brontosoftware_Magento_Connector_SettingsInterface $settings,
        Brontosoftware_Magento_Core_Catalog_ProductCacheInterface $productRepo
    ) {
        parent::__construct($config);
        $this->_settings = $settings;
        $this->_productRepo = $productRepo;
    }

    /**
     * @see parent
     */
    public function isEnabled($scopeType = 'default', $scopeCode = null)
    {
        return $this->_config->isSetFlag(self::XML_PATH_ENABLED, $scopeType, $scopeCode);
    }

    /**
     * @see parent
     */
    public function isIncludeDiscount($scope = 'default', $scopeId = null)
    {
        return (
            !$this->_settings->isOrderService($scope, $scopeId) &&
            $this->_config->isSetFlag(self::XML_PATH_INCLUDE_DISCOUNT, $scope, $scopeId)
        );
    }

    /**
     * @see parent
     */
    public function isIncludeTax($scope = 'default', $scopeId = null)
    {
        return (
            !$this->_settings->isOrderService($scope, $scopeId) &&
            $this->_config->isSetFlag(self::XML_PATH_INCLUDE_TAX, $scope, $scopeId)
        );
    }

    /**
     * @see parent
     */
    public function isIncludeShipping($scope = 'default', $scopeId = null)
    {
        return (
            !$this->_settings->isOrderService($scope, $scopeId) &&
            $this->_config->isSetFlag(self::XML_PATH_INCLUDE_SHIPPING, $scope, $scopeId)
        );
    }

    /**
     * @see parent
     */
    public function isBasePrice($scope = 'default', $scopeId = null)
    {
        return $this->_config->getValue(self::XML_PATH_PRICE, $scope, $scopeId) == 'base';
    }

    /**
     * @see parent
     */
    public function getDescriptionAttribute($scope = 'default', $scopeId = null)
    {
        $attribute = $this->_config->getValue(self::XML_PATH_DESC, $scope, $scopeId);
        if (empty($attribute)) {
            $attribute = 'description';
        }
        return $attribute;
    }

    /**
     * @see parent
     */
    public function getImageAttribute($scope = 'default', $scopeId = null)
    {
        $attribute = $this->_config->getValue(self::XML_PATH_IMAGE, $scope, $scopeId);
        if (empty($attribute)) {
            $attribute = 'image';
        }
        return $attribute;
    }

    /**
     * @see parent
     */
    public function createShippingItem($order)
    {
        $lineItem = array();
        if ($this->isIncludeShipping('store', $order->getStoreId()) && $order->hasShipments()) {
            $descriptions = array();
            foreach ($order->getTracksCollection() as $track) {
                if ($track->hasTrackNumber() && $track->hasTitle()) {
                    $descriptions[] = "{$track->getTitle()} - {$track->getTrackNumber()}";
                }
            }
            $itemObject = new Brontosoftware_Magento_Core_DataObject(array(
                'parent_item_id' => false,
                'qty_ordered' => 1,
                'store_id' => $order->getStoreId(),
                'row_total' => $order->getShippingAmount(),
                'base_row_total' => $order->getBaseShippingAmount(),
                'tax_amount' => $order->getShippingTaxAmount(),
                'base_tax_amount' => $order->getBaseShippingTaxAmount(),
                'discount_amount' => $order->getShippingDiscountAmount(),
                'base_discount_amount' => $order->getBaseShippingDiscountAmount()
            ));
            $price = $this->getItemPrice($itemObject);
            $lineItem['sku'] = self::SHIPPING_SKU;
            $lineItem['name'] = $order->getShippingDescription();
            $lineItem['description'] = implode('<br/>', $descriptions);
            $lineItem['quantity'] = 1;
            $lineItem['totalPrice'] = $price;
            $lineItem['salePrice'] = $price;
        }
        return $lineItem;
    }

    /**
     * @see parent
     */
    public function getOrderStatus($scopeType = 'default', $scopeCode = null)
    {
        return $this->_config->getValue(self::XML_PATH_STATUS, $scopeType, $scopeCode);
    }

    /**
     * @see parent
     */
    public function getTidHash($scopeType = 'default', $scopeCode = null)
    {
        return preg_replace('/[\-;,=\s]/', '', base64_encode($this->_settings->getSiteId($scopeType, $scopeCode)));
    }

    /**
     * @see parent
     */
    public function getImportStatus($scopeType = 'default', $scopeCode = null)
    {
        $imports = $this->_config->getValue(self::XML_PATH_IMPORT, $scopeType, $scopeCode);
        if (is_string($imports)) {
            $imports = explode(',', $imports);
        } else {
            $imports = array();
        }
        return $imports;
    }

    /**
     * @see parent
     */
    public function getDeleteStatus($scopeType = 'default', $scopeCode = null)
    {
        $deletes = $this->_config->getValue(self::XML_PATH_DELETE, $scopeType, $scopeCode);
        if (is_string($deletes)) {
            $deletes = explode(',', $deletes);
        } else {
            $deletes = array();
        }
        return $deletes;
    }

    /**
     * @see parent
     */
    public function getItemImage($lineItem)
    {
        return $this->_productRepo->getImage(
            $this->_product($lineItem, false),
            $this->getImageAttribute('store', $lineItem->getStoreId()),
            $this->_parentProductId($lineItem));
    }

    /**
     * @see parent
     */
    public function getItemOtherField($lineItem)
    {
        $product = $this->_product($lineItem, false);
        if ($product) {
            $otherField = $this->_config->getValue(self::XML_PATH_OTHER, 'store', $lineItem->getStoreId());
            $attribute = $product->getResource()->getAttribute($otherField);
            if ($attribute) {
                $other = $product->getData($otherField);
                if (preg_match('/Image$/', get_class($attribute->getFrontend()))) {
                    return $attribute->getFrontend()->getUrl($product);
                } else if ($attribute->usesSource()) {
                    $other = $attribute->getSource()->getOptionText($other);
                }
                if ($other === false) {
                    $other = null;
                }
                return $other;
            }
        }
        return null;
    }

    /**
     * @see parent
     */
    public function getItemUrl($lineItem)
    {
        return $this->_productRepo->getUrl($this->getVisibleProduct($lineItem));
    }


    /**
     * @see parent
     */
    public function getItemCategories($lineItem)
    {
        $product = $this->_product($lineItem);
        if ($product) {
            return $this->_productRepo->getCategory($product);
        }
        return null;
    }

    /**
     * @see parent
     */
    public function getItemDescription($lineItem)
    {
        $product = $this->getVisibleProduct($lineItem);
        if ($product) {
            return $this->_productRepo->getDescription($product, $this->getDescriptionAttribute('store', $lineItem->getStoreId()));
        } else {
            return $lineItem->getDescription();
        }
    }

    /**
     * @see parent
     */
    public function getItemName($lineItem)
    {
        return $this->_parent($lineItem)->getName();
    }

    /**
     * @see parent
     */
    public function getItemPrice($lineItem, $customerView = false)
    {
        $parentItem = $this->_parent($lineItem);
        if ($customerView) {
            return $parentItem->getPrice();
        } else {
            $storeId = $parentItem->getStoreId();
            $basePrice = $this->isBasePrice('store', $storeId);
            if ($this->_settings->isOrderService('store', $storeId)) {
                return $basePrice ?
                    $parentItem->getBasePrice() :
                    $parentItem->getPrice();
            } else {
                $quantity = $parentItem->getQtyOrdered();
                $rowTotal = $this->_rowTotal($parentItem, $basePrice);
                return !empty($quantity) ? max((float) ($rowTotal / $quantity), 0.00) : 0.00;
            }
        }
    }

    /**
     * @see parent
     */
    public function getItemDiscount($lineItem, $customerView = false)
    {
        $parentItem = $this->_parent($lineItem);
        if ($customerView) {
            return $parentItem->getDiscountAmount();
        } else {
            $storeId = $parentItem->getStoreId();
            $basePrice = $this->isBasePrice('store', $storeId);
            if ($this->_settings->isOrderService('store', $storeId)) {
                return $basePrice ?
                    $parentItem->getBaseDiscountAmount() :
                    $parentItem->getDiscountAmount();
            } else {
                // Discounts are included in the item price optionally
                return 0.00;
            }
        }
    }

    /**
     * @see parent
     */
    public function getItemRowTotal($lineItem, $customerView = false)
    {
        $parentItem = $this->_parent($lineItem);
        if ($customerView) {
            return $parentItem->getRowTotal();
        } else {
            $storeId = $parentItem->getStoreId();
            $basePrice = $this->isBasePrice('store', $storeId);
            if ($this->_settings->isOrderService('store', $storeId)) {
                return $basePrice ?
                    $parentItem->getBaseRowTotal() :
                    $parentItem->getRowTotal();
            } else {
                return $this->_rowTotal($parentItem, $basePrice);
            }
        }
    }

    /**
     * @see parent
     */
    public function getFlatItems($object)
    {
        $index = null;
        $lineItems = array();
        foreach ($object->getAllItems() as $lineItem) {
            // If a parent exists, override previous index
            if ($lineItem->getParentItemId()) {
                $lineItems[$index] = $lineItem;
            } else {
                $lineItems[] = $lineItem;
                if (is_null($index)) {
                    $index = 0;
                } else {
                    $index++;
                }
            }
        }
        return $lineItems;
    }

    /**
     * @see parent
     */
    public function getVisibleProduct($lineItem)
    {
        return $this->_productRepo->getVisibleProduct(
            $lineItem->getProductId(),
            $this->_parentProductId($lineItem),
            $lineItem->getStoreId());
    }

    /**
     * @param mixed $lineItem
     * @return mixed
     */
    protected function _product($lineItem, $includeParent = true)
    {
        if ($includeParent) {
            $lineItem = $this->_parent($lineItem);
        }
        return $this->_productRepo->getById($lineItem->getProductId(), $lineItem->getStoreId());
    }

    /**
     * @param mixed $lineItem
     * @return mixed
     */
    protected function _parent($lineItem)
    {
        if ($lineItem->getParentItemId()) {
            return $lineItem->getParentItem();
        }
        return $lineItem;
    }

    /**
     * Gets the product of the parent or null
     *
     * @param mixed $lineItem
     * @return mixed
     */
    protected function _parentProductId($lineItem)
    {
        $parentId = null;
        if ($lineItem->getParentItemId()) {
            $parentId = $lineItem->getParentItem()->getProductId();
        }
        return $parentId;
    }

    /**
     * Adjusts the row total for taxes and discounts
     *
     * @param mixed $parentItem
     * @param boolean $basePrice
     * @return float
     */
    protected function _rowTotal($parentItem, $basePrice)
    {
        $rowTotal = $basePrice ?
            $parentItem->getBaseRowTotal() :
            $parentItem->getRowTotal();
        if ($this->isIncludeTax('store', $parentItem->getStoreId())) {
            $rowTotal += $basePrice ?
                $parentItem->getBaseTaxAmount() :
                $parentItem->getTaxAmount();
        }
        if ($this->isIncludeDiscount('store', $parentItem->getStoreId())) {
            $rowTotal -= $basePrice ?
                $parentItem->getBaseDiscountAmount() :
                $parentItem->getDiscountAmount();
        }
        return $rowTotal;
    }
}
