<?php
/**
 * This file was generated by the ConvertToLegacy class in bronto-legacy.
 * The purpose of the conversion was to maintain PSR-0 compliance while
 * the main development focuses on modern styles found in PSR-4.
 *
 * For the original:
 * @see src/Bronto/Magento/Recommendation/Settings.php
 */


class Brontosoftware_Magento_Recommendation_Settings extends Brontosoftware_Magento_Core_Config_ContainerAbstract implements Brontosoftware_Magento_Recommendation_SettingsInterface
{
    const DEFAULT_UPDATE_THRESHOLD = 86400;

    protected static $_sources = array(
        'primary' => 'Primary',
        'secondary' => 'Secondary',
        'fallback' => 'Fallback'
    );

    protected $_dataFactory;
    protected $_reports;
    protected $_sourceFactory;
    protected $_productRepo;
    protected $_storeManager;
    protected $_eventManager;

    /**
     * @param Brontosoftware_Magento_Core_Config_FactoryInterface $dataFactory
     * @param Brontosoftware_Magento_Core_Config_ScopedInterface $config
     * @param Brontosoftware_Magento_Core_Report_ManagerInterface $reports
     * @param Brontosoftware_Magento_Recommendation_Collect_SourceFactoryInterface $sourceFactory
     * @param Brontosoftware_Magento_Core_Catalog_ProductCacheInterface $productRepo
     * @param Brontosoftware_Magento_Core_Store_ManagerInterface $storeManager
     * @param Brontosoftware_Magento_Core_Event_ManagerInterface $eventManager
     * @param Brontosoftware_Magento_Core_Customer_CacheInterface $customerCache
     */
    public function __construct(
        Brontosoftware_Magento_Core_Config_FactoryInterface $dataFactory,
        Brontosoftware_Magento_Core_Config_ScopedInterface $config,
        Brontosoftware_Magento_Core_Report_ManagerInterface $reports,
        Brontosoftware_Magento_Recommendation_Collect_SourceFactoryInterface $sourceFactory,
        Brontosoftware_Magento_Core_Catalog_ProductCacheInterface $productRepo,
        Brontosoftware_Magento_Core_Store_ManagerInterface $storeManager,
        Brontosoftware_Magento_Core_Event_ManagerInterface $eventManager,
        Brontosoftware_Magento_Core_Customer_CacheInterface $customerCache
    ) {
        parent::__construct($config);
        $this->_dataFactory = $dataFactory;
        $this->_reports = $reports;
        $this->_sourceFactory = $sourceFactory;
        $this->_productRepo = $productRepo;
        $this->_storeManager = $storeManager;
        $this->_eventManager = $eventManager;
        $this->_customerCache = $customerCache;
    }

    /**
     * @see parent
     */
    public function isEnabled($scopeType = 'default', $scopeId = null)
    {
        return $this->_config->isSetFlag(self::XML_PATH_ENABLED, $scopeType, $scopeId);
    }

    /**
     * @see parent
     */
    public function isAutoRefreshing($scopeType = 'default', $scopeId = null)
    {
        return $this->_config->isSetFlag(self::XML_PATH_AUTO_REFRESH, $scopeType, $scopeId);
    }

    /**
     * @see parent
     */
    public function getSources()
    {
        return self::$_sources;
    }

    /**
     * @see parent
     */
    public function getDescription($product, $attribute = 'description')
    {
        $description = $this->_productRepo->getDescription($product, $attribute);
        if ($this->_config->isSetFlag(self::XML_PATH_TRUNCATED, 'store', $product->getStoreId())) {
            $length = $this->_config->getValue(self::XML_PATH_DESC_LENGTH, 'store', $product->getStoreId());
            $description = strip_tags($description, '<br>');
            if (strlen($description) > $length) {
                $description = substr($description, 0, $length - 4);
                $lastWS = strrpos($description, ' ');
                if ($lastWS === false) {
                    $description .= ' ...';
                } else {
                    $description = substr($description, 0, $lastWS) . ' ...';
                }
            }
        }
        return $description;
    }

    /**
     * @see parent
     */
    public function getPromotion($promotionId, $storeId = null, $forceEnable = false)
    {
        $data = $this->_dataFactory->getCollection()
            ->addFieldToFilter('path', array( 'eq' => str_replace('%', $this->_safeId($promotionId), self::XML_PATH_PROMOTION_OBJECTS)));
        if (!is_null($storeId)) {
            $data->addFieldToFilter('scope_id', array( 'in' => array( '0', $storeId )) );
        }
        $object = null;
        foreach ($data as $config) {
            $object = $this->_loadObject($config, $forceEnable);
        }
        return $object;
    }

    /**
     * @see parent
     */
    public function getFields($promotion, Brontosoftware_Magento_Recommendation_Collect_ContextInterface $context = null)
    {
        if (is_string($promotion)) {
            $promotion = $this->getPromotion($promotion);
        }
        if (is_null($context)) {
            $context = new Brontosoftware_Magento_Recommendation_Collect_Context_Nothing();
        }
        $collector = $this->_sourceFactory->create(Brontosoftware_Magento_Recommendation_Collect_SourceInterface::TYPE_INITIAL, $promotion);
        return $this->_relatedFields($collector->collect($context), $context);
    }

    /**
     * @see parent
     */
    public function getAll(Brontosoftware_Magento_Connector_RegistrationInterface $registration)
    {
        $scopeName = $registration->getScope();
        if ($scopeName != 'default') {
            $scopeName .= 's';
        }
        $data = $this->_dataFactory->getCollection()
            ->addFieldToFilter('path', array( 'like' => self::XML_PATH_PROMOTION_OBJECTS ))
            ->addFieldToFilter('scope', array( 'eq' => $scopeName ))
            ->addFieldToFilter('scope_id', array( 'eq' => $registration->getScopeId()));
        $promotions = array();
        foreach ($data as $config) {
            $promotion = $this->_loadObject($config);
            if (empty($promotion)) {
                continue;
            }
            $promotions[] = $promotion;
        }
        return $promotions;
    }

    /**
     * @see parent
     */
    public function getRefreshableKeys(Brontosoftware_Magento_Connector_RegistrationInterface $registration)
    {
        $reportKeys = array();
        foreach ($this->getAll($registration) as $promotion) {
            foreach ($this->getSources() as $source => $sourceLabel) {
                if (!array_key_exists($source, $promotion)) {
                    continue;
                }
                if (array_key_exists($promotion[$source], $reportKeys)) {
                    continue;
                }
                if ($this->_reports->isReportKey($promotion[$source])) {
                    $threshold = (int) $this->_config->getValue(self::XML_PATH_UPDATE_THRESHOLD, $promotion['scope'], $promotion['scopeId']);
                    $lastUpdate = $this->_reports->getLastUpdate($promotion[$source]);
                    if ($this->isRefreshable($lastUpdate, $threshold * self::DEFAULT_UPDATE_THRESHOLD)) {
                        $reportKeys[$promotion[$source]] = empty($lastUpdate) ? null : $lastUpdate;
                    }
                }
            }
        }
        return $reportKeys;
    }

    /**
     * @see parent
     */
    public function isRefreshable($lastUpdate, $threshold = null)
    {
        if (empty($threshold)) {
            $threshold = self::DEFAULT_UPDATE_THRESHOLD;
        }
        return empty($lastUpdate) || ((time() - strtotime($lastUpdate)) > $threshold);
    }

    /**
     * Related product fields, as in delivery fields
     *
     * @param array $productHash
     * @param mixed $context
     * @return array
     */
    protected function _relatedFields($productHash, $context)
    {
        $customerGroupId = 0;
        if ($context->getCustomerId()) {
            $customer = $this->_customerCache->getById($context->getCustomerId());
            $customerGroupId = $customer->getGroupId();
        }
        list($base, $currency, $options) = $this->_currencyAndOptions($context->getStoreId());
        $fields = array();
        $index = 0;
        $description = $this->_config->getValue(self::XML_PATH_DESCRIPTION, 'store', $context->getStoreId());
        $image = $this->_config->getValue(self::XML_PATH_IMAGE, 'store', $context->getStoreId());
        foreach ($productHash as $productId => $product) {
            $index++;
            $product->setCustomerGroupId($customerGroupId);
            $price = $product->getPrice();
            if ($base != $currency) {
                $price = $base->convert($price, $currency);
            }
            $relatedFields = array();
            $relatedFields['relatedId_' . $index] = $productId;
            $relatedFields['relatedName_' . $index] = $product->getName();
            $relatedFields['relatedDescription_' . $index] = $this->getDescription($product, $description);
            $relatedFields['relatedSku_' . $index] = $product->getSku();
            $relatedFields['relatedImgUrl_' . $index] = $this->_productRepo->getImage($product, $image);
            $relatedFields['relatedUrl_' . $index] = $this->_productRepo->getUrl($product);
            $relatedFields['relatedPrice_' . $index] = $currency->formatTxt($price, $options);
            $container = new Brontosoftware_Magento_Core_DataObject();
            $container->setRelatedFields($relatedFields);
            $this->_eventManager->dispatch('brontosoftware_recommendation_item', array(
                'context' => $context,
                'index' => $index,
                'product' => $product,
                'container' => $container
            ));
            $fields += $container->getRelatedFields();
        }
        return $fields;
    }

    /**
     * Provided a store, return the base, default, and options
     *
     * @param mixed $storeId
     * @return array
     */
    protected function _currencyAndOptions($storeId)
    {
        $store = $this->_storeManager->getStore($storeId);
        $base = $store->getBaseCurrency();
        $currency = $base;
        if ($base->getCode() != $store->getDefaultCurrencyCode()) {
            $currency = $store->getDefaultCurrency();
        }
        $options = array(
            'precision' => 2,
            'display' => 1
        );
        if ($this->_config->isSetFlag(self::XML_PATH_DISPLAY_SYMBOL, 'store', $storeId)) {
            $options['display'] = 2;
        }
        return array($base, $currency, $options);
    }

    /**
     * Internal helper method to load connectorized promotion
     *
     * @param mixed $config
     * @param boolean $forceEnable
     * @return array
     */
    protected function _loadObject($config, $forceEnable = false)
    {
        $object = unserialize($config->getValue());
        if ($forceEnable || ((!array_key_exists('enabled', $object) || $object['enabled']) && $this->isEnabled($config->getScope(), $config->getScopeId()))) {
            $object['scope'] = $config->getScope();
            $object['scopeId'] = $config->getScopeId();
            return $object;
        } else {
            return null;
        }
    }
}
