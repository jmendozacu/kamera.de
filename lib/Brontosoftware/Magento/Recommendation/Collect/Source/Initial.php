<?php
/**
 * This file was generated by the ConvertToLegacy class in bronto-legacy.
 * The purpose of the conversion was to maintain PSR-0 compliance while
 * the main development focuses on modern styles found in PSR-4.
 *
 * For the original:
 * @see src/Bronto/Magento/Recommendation/Collect/Source/Initial.php
 */


class Brontosoftware_Magento_Recommendation_Collect_Source_Initial implements Brontosoftware_Magento_Recommendation_Collect_SourceInterface
{
    const DEFAULT_THRESHOLD = 30;

    protected $_sourceFactory;
    protected $_settings;
    protected $_promotion;
    protected $_productCache;
    protected $_exclusionHash;
    protected $_exclusionCategories;
    protected $_productHash;
    protected $_logger;

    /**
     * @param Brontosoftware_Magento_Recommendation_Collect_SourceFactoryInterface $sourceFactory
     * @param Brontosoftware_Magento_Recommendation_SettingsInterface $settings
     * @param Brontosoftware_Magento_Core_Catalog_ProductCacheInterface $productRepo
     * @param Brontosoftware_Magento_Core_Log_LoggerInterface $logger
     * @param array $promotion
     */
    public function __construct(
        Brontosoftware_Magento_Recommendation_Collect_SourceFactoryInterface $sourceFactory,
        Brontosoftware_Magento_Recommendation_SettingsInterface $settings,
        Brontosoftware_Magento_Core_Catalog_ProductCacheInterface $productRepo,
        Brontosoftware_Magento_Core_Log_LoggerInterface $logger,
        array $promotion = array()
    ) {
        $this->_sourceFactory = $sourceFactory;
        $this->_settings = $settings;
        $this->_promotion = $promotion;
        $this->_productRepo = $productRepo;
        $this->_logger = $logger;
    }

    /**
     * @see parent
     */
    public function collect(Brontosoftware_Magento_Recommendation_Collect_ContextInterface $context)
    {
        // TODO: Handle parent items a little better
        if (is_null($this->_productHash)) {
            $this->_productHash = array();
            $this->_exclusionHash = array();
            $this->_exclusionCategories = array();
            $contextItems = $this->_flattenContextItems($context);
            if (array_key_exists('excludeProducts', $this->_promotion)) {
                foreach ($this->_promotion['excludeProducts'] as $productId) {
                    $this->_exclusionHash[$productId] = $productId;
                }
            }
            if (array_key_exists('exclusionCategories', $this->_promotion)) {
                foreach ($this->_promotion['exclusionCategories'] as $categoryId) {
                    $this->_exclusionCategories[$categoryId] = $categoryId;
                }
            }
            try {
                foreach ($this->_settings->getSources() as $source => $__) {
                    if (!array_key_exists($source, $this->_promotion)) {
                        continue;
                    }
                    if ($this->_isProductSource($this->_promotion[$source])) {
                        foreach ($contextItems as $item) {
                            $method = $this->_sourceFactory->create($this->_promotion[$source], $this->_promotion, array(
                                'product' => $item
                            ));
                            foreach ($method->collect($context) as $productId) {
                                $product = $this->_productRepo->getById($productId, $context->getStoreId());
                                if ($this->_isExcluded($product)) {
                                    continue;
                                }
                                $this->_addProduct($product);
                            }
                        }
                    } else {
                        $threshold = $source . 'Threshold';
                        $filler = array(
                            'threshold' => self::DEFAULT_THRESHOLD,
                            'products' => array(),
                            'categories' => array());
                        foreach ($filler as $fieldName => $defaultValue) {
                            $sourceName = $source . ucfirst($fieldName);
                            $this->_promotion[$fieldName] = array_key_exists($sourceName, $this->_promotion) ? $this->_promotion[$sourceName] : $defaultValue;
                        }
                        $method = $this->_sourceFactory->create($this->_promotion[$source], $this->_promotion);
                        foreach ($method->collect($context) as $productId) {
                            $product = $this->_productRepo->getById($productId, $context->getStoreId());
                            if ($this->_isExcluded($product)) {
                                continue;
                            }
                            $this->_addProduct($product);
                        }
                    }
                }
            } catch (OverflowException $e) {
                return $this->_productHash;
            } catch (Exception $e) {
                $this->_logger->critical($e);
            }
        }
        return $this->_productHash;
    }

    /**
     * Provided a context, create a flattened context for exclusions
     *
     * @param mixed $context
     * @return array
     */
    protected function _flattenContextItems($context)
    {
        $contextItems = array();
        foreach ($context->getContextItems() as $productId => $item) {
            list($parentItem, $product) = $item;
            if ($parentItem) {
                $productId = $parentItem->getProductId();
                foreach ($this->_productRepo->getChildrenIds($productId, $context->getStoreId()) as $childId) {
                    $this->_exclusionHash[$childId] = $childId;
                }
            }
            $this->_exclusionHash[$productId] = $productId;
            $contextItems[] = $this->_productRepo->getById($productId, $context->getStoreId());
        }
        return $contextItems;
    }

    /**
     * @param mixed $product
     * @return void
     */
    protected function _addProduct($product)
    {
        $this->_exclusionHash[$product->getId()] = $product;
        $this->_productHash[$product->getId()] = $product;
        if (count($this->_productHash) == $this->_promotion['limit']) {
            throw new OverflowException('Obtained all of the products');
        }
    }

    /**
     * Determines if the product should be excluded
     *
     * @param mixed $product
     * @return boolean
     */
    protected function _isExcluded($product)
    {
        if (is_null($product) || array_key_exists($product->getId(), $this->_exclusionHash)) {
            return true;
        }
        if (!empty($this->_exclusionCategories)) {
            foreach ($product->getCategoryIds() as $catId) {
                if (array_key_exists($catId, $this->_exclusionCategories)) {
                    return true;
                }
            }
        }
        return false;
    }

    /**
     * Determines if a product is required for the source to be complete
     *
     * @param string $source
     * @return boolean
     */
    protected function _isProductSource($source)
    {
        return (
            $source == self::TYPE_RELATED ||
            $source == self::TYPE_UPSELL ||
            $source == self::TYPE_CROSSSELL
        );
    }
}
