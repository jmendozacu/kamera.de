<?php
/**
 * This file was generated by the ConvertToLegacy class in bronto-legacy.
 * The purpose of the conversion was to maintain PSR-0 compliance while
 * the main development focuses on modern styles found in PSR-4.
 *
 * For the original:
 * @see src/Bronto/Magento/Contact/ExtensionAbstract.php
 */

abstract class Brontosoftware_Magento_Contact_ExtensionAbstract extends Brontosoftware_Magento_Connector_Discovery_AdvancedExtensionAbstract implements Brontosoftware_Magento_Connector_Discovery_GroupInterface, Brontosoftware_Magento_Connector_Discovery_TransformEventInterface
{
    protected $_orderRepo;
    protected $_customerRepo;
    protected $_orderPush;
    protected $_orderSource;
    protected $_useOrderSource = false;

    /**
     * @param Brontosoftware_Magento_Core_Sales_OrderCacheInterface $orderRepo
     * @param Brontosoftware_Magento_Core_Customer_CacheInterface $customerRepo
     * @param Brontosoftware_Magento_Core_App_EmulationInterface $appEmulation
     * @param Brontosoftware_Magento_Core_Store_ManagerInterface $storeManager
     * @param Brontosoftware_Magento_Connector_QueueManagerInterface $queueManager
     * @param Brontosoftware_Magento_Connector_SettingsInterface $connectorSettings
     * @param Brontosoftware_Magento_Connector_Event_HelperInterface $helper
     * @param Brontosoftware_Magento_Connector_Event_PlatformInterface $platform
     * @param Brontosoftware_Magento_Connector_Event_SourceInterface $source
     */
    public function __construct(
        Brontosoftware_Magento_Core_Sales_OrderCacheInterface $orderRepo,
        Brontosoftware_Magento_Core_Customer_CacheInterface $customerRepo,
        Brontosoftware_Magento_Core_App_EmulationInterface $appEmulation,
        Brontosoftware_Magento_Core_Store_ManagerInterface $storeManager,
        Brontosoftware_Magento_Connector_QueueManagerInterface $queueManager,
        Brontosoftware_Magento_Connector_SettingsInterface $connectorSettings,
        Brontosoftware_Magento_Connector_Event_HelperInterface $helper,
        Brontosoftware_Magento_Connector_Event_PlatformInterface $platform,
        Brontosoftware_Magento_Connector_Event_SourceInterface $source
    ) {
        parent::__construct(
            $appEmulation,
            $storeManager,
            $queueManager,
            $connectorSettings,
            $helper,
            $platform,
            $source);
        $this->_orderRepo = $orderRepo;
        $this->_customerRepo = $customerRepo;
        $this->_orderSource = new Brontosoftware_Magento_Contact_Event_GuestFromOrder($this->_helper);
        $this->_orderPush = new Brontosoftware_Magento_Connector_Event_PushLogic(
            $queueManager,
            $connectorSettings,
            $helper,
            $platform,
            $this->_orderSource,
            $this->_orderSource);
    }

    /**
     * @see parent
     */
    public function getSortOrder()
    {
        return 5;
    }

    /**
     * @see parent
     */
    public function getEndpointId()
    {
        return 'contact';
    }

    /**
     * @see parent
     */
    public function getEndpointName()
    {
        return $this->translate('Contacts');
    }

    /**
     * @see parent
     */
    public function getEndpointIcon()
    {
        return 'mage-icon-contacts';
    }

    /**
     * @see parent
     */
    public function gatherEndpoints($observer)
    {
        $observer->getDiscovery()->addGroupHelper($this);
    }

    /**
     * Updates a guest in Bronto, if the customer was a guest
     * @return void
     */
    public function updateGuestInfo($observer)
    {
        $order = $observer->getOrder();
        if ($this->_helper->getGuestOrderToggle('store', $order->getStoreId()) != 'none') {
            $this->_orderPush->pushEvent($order, $order->getStoreId());
        }
    }

    /**
     * @see parent
     */
    public function advancedAdditional($observer)
    {
        $observer->getEndpoint()->addOptionToScript("test", "jobName", array(
            'id' => 'test_' . $this->getEndpointId(),
            'name' => $this->translate('Contact')
        ));

        $observer->getEndpoint()->addFieldToScript('test', array(
            'id' => 'customerEmail',
            'name' => $this->translate('Customer Email'),
            'type' => 'text',
            'position' => 5,
            'depends' => array(
                array(
                    'id' => 'jobName',
                    'values' => array('test_'.$this->getEndpointId())
                )
            )
        ));

        $observer->getEndpoint()->addOptionToScript('historical', 'jobName', array(
            'id' => $this->getEndpointId(),
            'name' => $this->getEndpointName()
        ));

        $observer->getEndpoint()->addOptionToScript('event', 'moduleSettings', array(
            'id' => $this->getEndpointId(),
            'name' => $this->getEndpointName()
        ));

        $observer->getEndpoint()->addFieldToScript('historical', array(
            'id' => 'source',
            'name' => $this->translate('Source'),
            'type' => 'select',
            'position' => 3,
            'typeProperties' => array(
                'options' => array(
                    array(
                        'id' => 'customer',
                        'name' => $this->translate('Registered Users')
                    ),
                    array(
                        'id' => 'order',
                        'name' => $this->translate('Non-Registered Users (via Guest Orders)')
                    )
                ),
                'default' => 'customer'
            ),
            'depends' => array(
                array( 'id' => 'jobName', 'values' => array( $this->getEndpointId() ) )
            )
        ));
    }

    /**
     * @see parent
     */
    public function endpointInfo($observer)
    {
        $observer->getEndpoint()->addExtension(array(
            'id' => 'settings',
            'name' => $this->translate('Settings'),
            'fields' => array(
                array(
                    'id' => 'enabled',
                    'name' => $this->translate('Enabled'),
                    'type' => 'boolean',
                    'required' => true,
                    'typeProperties' => array( 'default' => false )
                ),
                array(
                    'id' => 'skipEmpty',
                    'name' => $this->translate('Skip Empty Values'),
                    'type' => 'boolean',
                    'required' => true,
                    'typeProperties' => array( 'default' => false )
                ),
                array(
                    'id' => 'guestOrder',
                    'name' => $this->translate('Sync Guest Order Fields'),
                    'type' => 'select',
                    'required' => true,
                    'typeProperties' => array(
                        'default' => 'merge',
                        'options' => array(
                            array( 'id' => 'shipping', 'name' => $this->translate('Shipping Address Only')),
                            array( 'id' => 'billing', 'name' => $this->translate('Billing Address Only')),
                            array( 'id' => 'merge', 'name' => $this->translate('Both Shipping and Billing Address')),
                            array( 'id' => 'none',  'name' => $this->translate('Do not Sync Contact Fields'))
                        )
                    )
                )
            )
        ));
        $attributes = $this->_helper->getAttributes();
        $attributeLabels = $this->_helper->getAttributeLabels();
        $attributeFilters = $this->_helper->getAttributeFilters();
        foreach ($attributes as $attributeId => $attributeSet) {
            $attributeFields = array();
            foreach ($attributeSet as $attributeField) {
                if ($this->_shouldSkip($attributeField, $attributeFilters[$attributeId])) {
                    continue;
                }
                $attributeFields[] = array(
                    'id' => $attributeField->getAttributeCode(),
                    'name' => $attributeField->getFrontendLabel(),
                    'type' => 'select',
                    'typeProperties' => array(
                        'bronto' => array(
                            'type' => 'contactField',
                            'displayType' => $this->_helper->getAttributeDisplayType($attributeField)
                        )
                    )
                );
            }
            $observer->getEndpoint()->addExtension(array(
                'id' => $attributeId,
                'name' => $attributeLabels[$attributeId],
                'fields' => $attributeFields
            ));
        }
    }

    /**
     * @see parent
     */
    public function transformEvent($observer)
    {
        $data = array();
        $transform = $observer->getTransform();
        $event = $transform->getContext();
        if (array_key_exists('type', $event) && $event['type'] == 'order') {
            $order = $this->_orderRepo->getById($event['id']);
            if ($order) {
                $data = $this->_orderSource->transform($order);
            }
        } else {
            $customer = $this->_customerRepo->getById($event['id']);
            if ($customer) {
                $data = $this->_source->transform($customer);
            }
        }
        $transform->setContact($data);
    }

    /**
     * @see parent
     */
    protected function _getObject($observer)
    {
        return $observer->getCustomer();
    }

    /**
     * @see parent
     */
    public function pushChanges($observer)
    {
        if ($observer->getAccountController()) {
            try {
                $customer = $this->_customerRepo->getById($this->_getObject($observer)->getId());
                $this->_pushLogic->pushEvent($customer, $this->_storeManager->getStore($customer->getStoreId()), false);
            } catch (Exception $e) {
            }
        } else {
            parent::pushChanges($observer);
        }
    }

    /**
     * Determines email change request will success and update
     *
     * @param string $customerId
     * @param string $email
     * @return void
     */
    public function updateEmail($customerId, $email)
    {
        $customer = $this->_customerRepo->getById($customerId);
        if ($customer && $customer->getEmail() != $email) {
            $emailCustomer = $this->_customerRepo->getByEmail($email);
            if (empty($emailCustomer) && Zend_Validate::is($email, 'EmailAddress')) {
                $customer->setEmail($email)->setIsUpdateEmail(true);
                $this->_pushLogic->pushEvent($customer, $this->_storeManager->getStore(), false);
            }
        }
    }

    /**
     * @see parent
     */
    protected function _historicalAction($data, $object)
    {
        return 'add';
    }

    /**
     * @see parent
     */
    protected function _source($data)
    {
        return $this->_useOrderSource ? $this->_orderSource : $this->_source;
    }

    /**
     * @see parent
     */
    protected function _sendTest($registration, $data)
    {
        $customers = array();
        if (array_key_exists('customerEmail', $data)) {
            $customers = $this->_attachCustomerScopeFilter($data, $this->_contactCollection());
            $customers->addFieldToFilter('email', array('eq' => $data['customerEmail']));
            if ($customers->getSize()) {
                return $customers;
            }
            $this->_useOrderSource = true;
            $customers = $this->_attachOrderScopeFilter($data, $this->_orderCollection())
                ->addFieldToFilter('customer_email', array('eq' => $data['customerEmail']))
                ->addFieldToFilter('customer_is_guest', array('eq' => 1));
            $customers->getSelect()->group('customer_email');
        }
        return $customers;
    }

    /**
     * @see parent
     */
    protected function _sendHistorical($registration, $data)
    {
        $collection = $this->_attachScopeFilter($data['options']);
        if (array_key_exists('startTime', $data)) {
            $startTime = $data['startTime'];
            if ($startTime) {
                $collection->addFieldToFilter('created_at', array('gt' => $startTime));
            }
        }
        if (array_key_exists('endTime', $data)) {
            $endTime = $data['endTime'];
            if ($endTime) {
                $collection->addFieldToFilter('created_at', array('lt' => $endTime));
            }
        }
        return $collection;
    }

    /**
     * Attributes lacking a frontend label or found in the filters are skipped
     *
     * @param mixed $attribute
     * @param array $filters
     * @return boolean
     */
    protected function _shouldSkip($attribute, $filters)
    {
        return (
            $attribute->getFrontendLabel() == '' ||
            in_array($attribute->getAttributeCode(), $filters)
        );
    }

    /**
     * Adds scope awareness to a generated collection
     *
     * @param array $data
     * @return mixed
     */
    protected function _attachScopeFilter($data)
    {
        $collection = array();
        $emailField = 'email';
        if ($data['source'] == 'order') {
            $this->_useOrderSource = true;
            $collection = $this->_attachOrderScopeFilter($data, $this->_orderCollection())
                ->addFieldToFilter('customer_is_guest', array('eq' => 1));
            $collection->getSelect()->group('customer_email');
        } else {
            $collection = $this->_attachCustomerScopeFilter($data, $this->_contactCollection());
        }
        return $collection;
    }

    /**
     * Added scope awareness to the collection
     *
     * @param array $data
     * @param mixed $customers
     * @return mixed
     */
    protected function _attachCustomerScopeFilter($data, $customers)
    {
        list($scopeName, $scopeId) = explode('.', $data['scopeId']);
        switch ($scopeName) {
            case 'website':
                return $customers->addFieldToFilter('website_id', array('eq' => $scopeId));
            case 'store':
                return $customers->addFieldToFilter('store_id', array('eq' => $scopeId));
        }
        return $customers;
    }

    /**
     * Add scopes awareness to order collections
     *
     * @param array $data
     * @param mixed $orders
     * @return mixed
     */
    protected function _attachOrderScopeFilter($data, $orders)
    {
        list($scopeName, $scopeId) = explode('.', $data['scopeId']);
        switch ($scopeName) {
            case 'website':
                $storeIds = array();
                $website = $this->_storeManager->getWebsite($scopeId);
                foreach ($website->getStores() as $store) {
                    $storeIds[] = $store->getId();
                }
                return $orders->addFieldToFilter('store_id', array('in' => $storeIds));
            case 'store':
                return $orders->addFieldToFilter('store_id', array('eq' => $scopeId));
        }
        return $orders;
    }

    /**
     * Implementors would provide a mutable collection
     *
     * @return Iterator
     */
    abstract protected function _contactCollection();

    /**
     * Implementors would provide a mutable order collection
     *
     * @return Iterator
     */
    abstract protected function _orderCollection();
}
