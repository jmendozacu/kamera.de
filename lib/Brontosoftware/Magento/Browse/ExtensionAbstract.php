<?php
/**
 * This file was generated by the ConvertToLegacy class in bronto-legacy.
 * The purpose of the conversion was to maintain PSR-0 compliance while
 * the main development focuses on modern styles found in PSR-4.
 *
 * For the original:
 * @see src/Bronto/Magento/Browse/ExtensionAbstract.php
 */

abstract class Brontosoftware_Magento_Browse_ExtensionAbstract extends Brontosoftware_Magento_Connector_Discovery_ExtensionPushEventAbstract implements Brontosoftware_Magento_Connector_Discovery_TransformEventInterface
{
    protected $_productRepo;

    /**
     * @param Brontosoftware_Magento_Core_Catalog_ProductCacheInterface $productRepo
     * @param Brontosoftware_Magento_Core_Store_ManagerInterface $storeManager
     * @param Brontosoftware_Magento_Connector_QueueManagerInterface $queueManager
     * @param Brontosoftware_Magento_Connector_SettingsInterface $connectorSettings
     * @param Brontosoftware_Magento_Cart_SettingsInterface $helper
     * @param Brontosoftware_Magento_Connector_Event_PlatformInterface $platform
     * @param Brontosoftware_Magento_Connector_Event_SourceInterface $source
     */
    public function __construct(
        Brontosoftware_Magento_Core_Catalog_ProductCacheInterface $productRepo,
        Brontosoftware_Magento_Core_Store_ManagerInterface $storeManager,
        Brontosoftware_Magento_Connector_QueueManagerInterface $queueManager,
        Brontosoftware_Magento_Connector_SettingsInterface $connectorSettings,
        Brontosoftware_Magento_Browse_SettingsInterface $helper,
        Brontosoftware_Magento_Connector_Event_PlatformInterface $platform,
        Brontosoftware_Magento_Connector_Event_SourceInterface $source
    ) {
        parent::__construct(
            $storeManager,
            $queueManager,
            $connectorSettings,
            $helper,
            $platform,
            $source);
        $this->_productRepo = $productRepo;
    }

    /**
     * @see parent
     */
    public function transformEvent($observer)
    {
        $data = array();
        $transform = $observer->getTransform();
        $event = $transform->getContext();
        $object = new Brontosoftware_Magento_Core_DataObject(array('context' => $event));
        if (array_key_exists('product_id', $event)) {
            $product = $this->_productRepo->getById($event['product_id'], $event['store_id']);
            if ($product) {
                $object->setProduct($product);
            }
        }
        $transform->setBrowse($this->_source->transform($object));
    }

    /**
     * Adds a Browse ecovery section to the the Integrations
     *
     * @return void
     */
    public function integrationAdditional($observer)
    {
        $observer->getEndpoint()->addExtension(array(
            'sort_order' => 1,
            'definition' => array(
                'id' => 'browse_recovery',
                'name' => $this->translate('Browse Recovery'),
                'fields' => array(
                    array(
                        'id' => 'enabled',
                        'name' => $this->translate('Enabled'),
                        'required' => true,
                        'type' => 'boolean',
                        'typeProperties' => array(
                            'default' => false,
                        )
                    ),
                    array(
                        'id' => 'site',
                        'name' => $this->translate('Site'),
                        'required' => true,
                        'type' => 'select',
                        'depends' => array( array( 'id' => 'enabled', 'values' => array( true ) ) ),
                        'typeProperties' => array( 'bronto' => array( 'type' => 'browseRecovery' ) )
                    )
                )
            )
        ));
    }

    /**
     * @see parent
     */
    protected function _getObject($observer)
    {
        $event = $observer->getEvent();
        $event->setStoreId($this->_storeManager->getStore()->getId());
        return $event;
    }
}
