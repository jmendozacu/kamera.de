<?php
/**
 * This file was generated by the ConvertToLegacy class in bronto-legacy.
 * The purpose of the conversion was to maintain PSR-0 compliance while
 * the main development focuses on modern styles found in PSR-4.
 *
 * For the original:
 * @see src/Bronto/Magento/Browse/Settings.php
 */

class Brontosoftware_Magento_Browse_Settings extends Brontosoftware_Magento_Core_Config_ContainerAbstract implements Brontosoftware_Magento_Browse_SettingsInterface
{
    const BRONTO_BROWSE = '__bmbc_br';

    protected $_cookies;
    protected $_writer;
    protected $_integration;
    protected $_session;
    protected $_productRepo;

    /**
     * @param Brontosoftware_Magento_Core_Cookie_WriterInterface $writer
     * @param Brontosoftware_Magento_Core_Cookie_ReaderInterface $cookies
     * @param Brontosoftware_Magento_Integration_SettingsInterface $integration
     * @param Brontosoftware_Magento_Core_Customer_SessionInterface $session
     * @param Brontosoftware_Magento_Core_Config_ScopedInterface $config
     * @param Brontosoftware_Magento_Core_Catalog_ProductCacheInterface $productRepo
     */
    public function __construct(
        Brontosoftware_Magento_Core_Cookie_WriterInterface $writer,
        Brontosoftware_Magento_Core_Cookie_ReaderInterface $cookies,
        Brontosoftware_Magento_Integration_SettingsInterface $integration,
        Brontosoftware_Magento_Core_Customer_SessionInterface $session,
        Brontosoftware_Magento_Core_Config_ScopedInterface $config,
        Brontosoftware_Magento_Core_Catalog_ProductCacheInterface $productRepo
    ) {
        parent::__construct($config);
        $this->_writer = $writer;
        $this->_cookies = $cookies;
        $this->_integration = $integration;
        $this->_session = $session;
        $this->_productRepo = $productRepo;
    }

    /**
     * @see parent
     */
    public function isEnabled($scope = 'default', $scopeId = null)
    {
        return $this->_config->isSetFlag(self::XML_PATH_ENABLED, $scope, $scopeId);
    }

    /**
     * @see parent
     */
    public function isSearchEnabled($scope = 'default', $scopeId = null)
    {
        return $this->_config->isSetFlag(self::XML_PATH_SEARCH_ENABLED, $scope, $scopeId);
    }

    /**
     * @see parent
     */
    public function getUniqueCustomerId()
    {
        $guid = $this->_cookies->getCookie(self::BRONTO_BROWSE, '');
        if (empty($guid)) {
            $guid = $this->_integration->generateUUID();
            $this->_writer->setServerCookie(self::BRONTO_BROWSE, $guid);
        }
        return $guid;
    }

    /**
     * @see parent
     */
    public function getSiteId($scope = 'default', $scopeId = null)
    {
        return $this->_config->getValue(self::XML_PATH_SITE, $scope, $scopeId);
    }

    /**
     * @see parent
     */
    public function createContext($browse, $when = null)
    {
        if (is_null($when)) {
            $when = time();
        }
        $context = array(
            'customer_id' => $this->getUniqueCustomerId(),
            'store_id' => $browse->getStoreId(),
            'timestamp' => $when
        );
        if ($browse->hasProduct()) {
            $context['product_id'] = $browse->getProduct()->getId();
            $context['category_id'] = $browse->getProduct()->getCategoryId();
            $context['value'] = $browse->getProduct()->getSku();
            $context['url'] = $this->_productRepo->getUrl($browse->getProduct());
        }
        if ($browse->hasUrl()) {
            $context['url'] = $browse->getUrl();
        }
        if ($browse->hasEventType()) {
            $context['event_type'] = $browse->getEventType();
        }
        if ($browse->hasEventTypeValue()) {
            $context['event_type_value'] = $browse->getEventTypeValue();
        }
        $email = $this->_session->getCustomer()->getEmail();
        if ($email) {
            $context['customer_email'] = $email;
        } else {
            $quote = new Brontosoftware_Magento_Core_DataObject(array(
                'customer_email' => false,
                'store_id' => $browse->getStoreId()
            ));
            $email = $this->_integration->getCartRecoveryEmail($quote);
            if ($email) {
                $context['customer_email'] = $email;
            }
        }
        return $context;
    }
}
