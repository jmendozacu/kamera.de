<?php
/**
 * This file was generated by the ConvertToLegacy class in bronto-legacy.
 * The purpose of the conversion was to maintain PSR-0 compliance while
 * the main development focuses on modern styles found in PSR-4.
 *
 * For the original:
 * @see src/Bronto/Magento/Optin/ExtensionAbstract.php
 */

abstract class Brontosoftware_Magento_Optin_ExtensionAbstract extends Brontosoftware_Magento_Connector_Discovery_AdvancedExtensionAbstract implements Brontosoftware_Magento_Connector_Discovery_GroupInterface, Brontosoftware_Magento_Connector_Discovery_TransformEventInterface
{
    protected $_subscribers;

    /**
     * @param Brontosoftware_Magento_Core_Subscriber_ManagerInterface $subscribers
     * @param Brontosoftware_Magento_Core_App_EmulationInterface $appEmulation
     * @param Brontosoftware_Magento_Core_Store_ManagerInterface $storeManager
     * @param Brontosoftware_Magento_Connector_QueueManagerInterface $queueManager
     * @param Brontosoftware_Magento_Connector_SettingsInterface $connectorSettings
     * @param Brontosoftware_Magento_Optin_SettingsInterface $helper
     * @param Brontosoftware_Magento_Connector_Event_PlatformInterface $platform
     * @param Brontosoftware_Magento_Connector_Event_SourceInterface $source
     */
    public function __construct(
        Brontosoftware_Magento_Core_Subscriber_ManagerInterface $subscribers,
        Brontosoftware_Magento_Core_App_EmulationInterface $appEmulation,
        Brontosoftware_Magento_Core_Store_ManagerInterface $storeManager,
        Brontosoftware_Magento_Connector_QueueManagerInterface $queueManager,
        Brontosoftware_Magento_Connector_SettingsInterface $connectorSettings,
        Brontosoftware_Magento_Optin_SettingsInterface $helper,
        Brontosoftware_Magento_Connector_Event_PlatformInterface $platform,
        Brontosoftware_Magento_Connector_Event_SourceInterface $source
    ) {
        parent::__construct(
            $appEmulation,
            $storeManager,
            $queueManager,
            $connectorSettings,
            $helper,
            $platform,
            $source);
        $this->_subscribers = $subscribers;
    }

    /**
     * Platforms will implement this to subscribe someone after
     * a purchase (potentially)
     *
     * @param mixed $observer
     */
    public abstract function subscribeAfterCheckout($observer);

    /**
     * @see parent
     */
    public function getSortOrder()
    {
        return 10;
    }

    /**
     * @see parent
     */
    public function getEndpointId()
    {
        return 'optin';
    }

    /**
     * @see parent
     */
    public function getEndpointName()
    {
        return $this->translate('Opt-Ins');
    }

    /**
     * @see parent
     */
    public function getEndpointIcon()
    {
        return 'mage-icon-optins';
    }

    /**
     * A script url is invoked by the Middleware to sync
     * a collection of emails and potentially unsubscribe them
     * in Magento
     *
     * @param mixed $observer
     */
    public function syncSubscribes($observer)
    {
        $script = $observer->getScript()->getObject();
        $results = array(
            'success' => 0,
            'error' => 0,
            'skipped' => 0
        );
        $emails = $script['data']['emails'];
        foreach ($emails as $email) {
            $subscriber = $this->_subscribers->getByEmail($email);
            if (empty($subscriber)) {
                $results['skipped']++;
                continue;
            }
            if (!$this->_helper->isEnabled('store', $subscriber->getStoreId()) || !$this->_helper->isSyncUnsub('store', $subscriber->getStoreId())) {
                $results['skipped']++;
                continue;
            }
            if ($this->_subscribers->unsubscribe($subscriber, true, 'bronto')) {
                $results['success']++;
            } else {
                $results['error']++;
            }
        }
        $observer->getScript()->setProgress($results);
    }

    /**
     * @see parent
     */
    public function gatherEndpoints($observer)
    {
        $observer->getDiscovery()->addGroupHelper($this);
    }

    /**
     * @see parent
     */
    public function advancedAdditional($observer)
    {
        $observer->getEndpoint()->addOptionToScript('historical', 'jobName', array(
            'id' => $this->getEndpointId(),
            'name' => $this->getEndpointName()
        ));

        $observer->getEndpoint()->addFieldToScript('historical', array(
            'id' => 'setStatus',
            'name' => $this->translate('Set Status In Bronto'),
            'type' => 'select',
            'position' => 5,
            'typeProperties' => array(
                'default' => 'new',
                'options' => array(
                    array( 'id' => 'new', 'name' => $this->translate('Only New Contacts') ),
                    array( 'id' => 'any', 'name' => $this->translate('Any Contact') )
                )
            ),
            'depends' => array(
                array( 'id' => 'jobName', 'values' => array( $this->getEndpointId() ) )
            )
        ));

        $observer->getEndpoint()->addFieldToScript('historical', array(
            'id' => 'subscriberSource',
            'name' => $this->translate('Source'),
            'type' => 'select',
            'position' => 6,
            'typeProperties' => array(
                'default' => 'all',
                'options' => array(
                    array( 'id' => 'all', 'name' => $this->translate('Registerd and Guest Subscribers') ),
                    array( 'id' => 'gt', 'name' => $this->translate('Only Registered Subscribers') ),
                    array( 'id' => 'eq', 'name' => $this->translate('Only Guest Subscribers') )
                )
            ),
            'depends' => array(
                array( 'id' => 'jobName', 'values' => array( $this->getEndpointId() ) )
            )
        ));

        $observer->getEndpoint()->addFieldToScript('historical', array(
            'id' => 'subscriberStatus',
            'name' => $this->translate('Status Filter'),
            'type' => 'select',
            'position' => 7,
            'typeProperties' => array(
                'default' => '1',
                'options' => array(
                    array( 'id' => 'all', 'name' => $this->translate('All Newsletter Subscribers' ) ),
                    array( 'id' => '1', 'name' => $this->translate('Only Subscribed') ),
                    array( 'id' => '3', 'name' => $this->translate('Only Unsubscribed') ),
                    array( 'id' => '4', 'name' => $this->translate('Only Unconfirmed') )
                )
            ),
            'depends' => array(
                array( 'id' => 'jobName', 'values' => array( $this->getEndpointId() ) )
            )
        ));

        $observer->getEndpoint()->addOptionToScript('test', 'jobName', array(
            'id' => 'test_' . $this->getEndpointId(),
            'name' => $this->translate('Opt-In')
        ));

        $observer->getEndpoint()->addFieldToScript('test', array(
            'id' => 'subscriberEmail',
            'name' => $this->translate('Subscriber Email'),
            'type' => 'text',
            'position' => 7,
            'depends' => array(
                array( 'id' => 'jobName', 'values' => array( 'test_' . $this->getEndpointId() ) )
            )
        ));

        $observer->getEndpoint()->addOptionToScript('event', 'moduleSettings', array(
            'id' => $this->getEndpointId(),
            'name' => $this->getEndpointName()
        ));
    }

    /**
     * @see parent
     */
    public function endpointInfo($observer)
    {
        $observer->getEndpoint()->addExtension(array(
            'id' => 'settings',
            'name' => $this->translate('Settings'),
            'fields' => array(
                array(
                    'id' => 'enabled',
                    'name' => $this->translate('Enabled'),
                    'type' => 'boolean',
                    'required' => true,
                    'typeProperties' => array( 'default' => false )
                ),
                array(
                    'id' => 'syncUnsubs',
                    'name' => $this->translate('Sync Bronto Unsubscribes'),
                    'type' => 'boolean',
                    'required' => true,
                    'typeProperties' => array( 'default' => true )
                ),
                array(
                    'id' => 'lists',
                    'name' => $this->translate('Add Opt-Ins to Lists'),
                    'type' => 'select',
                    'typeProperties' => array(
                        'bronto' => array( 'type' => 'list' ),
                        'multiple' => true
                    )
                ),
                array(
                    'id' => 'removeLists',
                    'name' => $this->translate('Remove Opt-Outs from Lists'),
                    'type' => 'select',
                    'typeProperties' => array(
                        'bronto' => array( 'type' => 'list' ),
                        'multiple' => true
                    )
                )
            )
        ));

        $observer->getEndpoint()->addExtension(array(
            'id' => 'checkout',
            'name' => $this->translate('Checkout'),
            'fields' => array(
                array(
                    'id' => 'enabled',
                    'name' => $this->translate('Enabled'),
                    'type' => 'boolean',
                    'required' => true,
                    'typeProperties' => array( 'default' => false )
                ),
                array(
                    'id' => 'source',
                    'name' => $this->translate('Add Opt-Ins to Source List'),
                    'type' => 'select',
                    'depends' => array(
                        array( 'id' => 'enabled', 'values' => array( true ) )
                    ),
                    'typeProperties' => array(
                        'bronto' => array( 'type' => 'list' )
                    )
                ),
                array(
                    'id' => 'label',
                    'name' => $this->translate('Checkbox Label'),
                    'type' => 'text',
                    'required' => true,
                    'typeProperties' => array(
                        'default' => $this->translate('Sign Up for our Newsletter'),
                    ),
                    'depends' => array(
                        array('id' => 'enabled', 'values' => array( true ) )
                    )
                ),
                array(
                    'id' => 'layout',
                    'name' => $this->translate('Checkbox Location'),
                    'type' => 'select',
                    'required' => true,
                    'depends' => array(
                        array('id' => 'enabled', 'values' => array( true ) )
                    ),
                    'typeProperties' => array(
                        'default' => 'shipping',
                        'options' => $this->_checkoutLayouts()
                    )
                ),
                array(
                    'id' => 'checked',
                    'name' => $this->translate('Checked by Default'),
                    'type' => 'boolean',
                    'required' => true,
                    'depends' => array(
                        array('id' => 'enabled', 'values' => array( true ) )
                    ),
                    'typeProperties' => array( 'default' => true )
                ),
            )
        ));

        $observer->getEndpoint()->addExtension(array(
            'id' => 'form',
            'name' => $this->translate('Embedded Webform'),
            'fields' => array(
                array(
                    'id' => 'enabled',
                    'name' => $this->translate('Enabled'),
                    'type' => 'boolean',
                    'required' => true,
                    'typeProperties' => array( 'default' => false )
                ),
                array(
                    'id' => 'secret',
                    'name' => $this->translate('Shared Secret'),
                    'type' => 'text',
                    'required' => true,
                    'depends' => array(
                        array(
                            'id' => 'enabled',
                            'values' => array( true )
                        )
                    )
                ),
                array(
                    'id' => 'subscriberUrl',
                    'name' => $this->translate('Subscriber Lookup'),
                    'type' => 'text',
                    'required' => true,
                    'depends' => array(
                        array(
                            'id' => 'enabled',
                            'values' => array( true )
                        )
                    )
                ),
                array(
                    'id' => 'height',
                    'name' => $this->translate('Form Height'),
                    'type' => 'integer',
                    'typeProperties' => array(
                        'min' => 100,
                        'default' => 700
                    ),
                    'depends' => array(
                        array(
                            'id' => 'enabled',
                            'values' => array( true )
                        )
                    )
                )
            )
        ));
    }

    /**
     * @see parent
     */
    public function transformEvent($observer)
    {
        $data = array();
        $transform = $observer->getTransform();
        $event = $transform->getContext();
        $subscriber = $this->_subscribers->getById($event['id']);
        if ($subscriber) {
            $data = $this->_source->transform($subscriber
                ->setIgnoreStatus($event['ignore_status'])
                ->setLocation($event['location']));
        }
        $transform->setSubscriber($data);
    }

    /**
     * Attaches the registered scope filter based on registration
     *
     * @param array $data
     * @param mixed $subscribers
     * @return mixed
     */
    protected function _attachScopeFilter($data, $subscribers)
    {
        list($scopeName, $scopeId) = explode('.', $data['scopeId']);
        switch ($scopeName) {
            case 'website':
                $storeIds = array();
                $website = $this->_storeManager->getWebsite($scopeId);
                foreach ($website->getStores() as $store) {
                    $storeIds[] = $store->getId();
                }
                return $subscribers->addFieldToFilter('store_id', array( 'in' => $storeIds ));
            case 'store':
                return $subscribers->addFieldToFilter('store_id', array( 'eq' => $scopeId ));
        }
        return $subscribers;
    }

    /**
     * @see parent
     */
    protected function _sendTest($registration, $data)
    {
        $subscribers = array();
        if (array_key_exists('subscriberEmail', $data)) {
            $subscribers = $this->_attachScopeFilter($data, $this->_subscribers->getCollection());
            $subscribers->addFieldToFilter('subscriber_email', array( 'eq' => $data['subscriberEmail'] ));
        }
        return $subscribers;
    }

    /**
     * @see parent
     */
    protected function _sendHistorical($registration, $data)
    {
        $subscribers = $this->_attachScopeFilter($data['options'], $this->_subscribers->getCollection());
        if (array_key_exists('subscriberSource', $data['options']) && $data['options']['subscriberSource'] != 'all') {
            $subscribers->addFieldToFilter('customer_id', array( $data['options']['subscriberSource'] => '0' ));
        }
        if (array_key_exists('subscriberStatus', $data['options']) && $data['options']['subscriberStatus'] != 'all') {
            $subscribers->addFieldToFilter('subscriber_status', array( 'eq' => $data['options']['subscriberStatus'] ));
        }
        return $subscribers;
    }

    /**
     * @see parent
     */
    protected function _historicalAction($data, $object)
    {
        $action = parent::_historicalAction($data, $object);
        if (array_key_exists('options', $data)) {
            if (array_key_exists('setStatus', $data['options']) && $data['options']['setStatus'] == 'new') {
                $action = 'add';
            }
        }
        return $action;
    }

    /**
     * Returns the default checkout layout tags
     * Implementations can override this functionality
     *
     * @return array
     */
    protected function _checkoutLayouts()
    {
        return array(
            array( 'id' => 'shipping', 'name' => $this->translate('Shipping Step') ),
            array( 'id' => 'billing', 'name' => $this->translate('Billing Step') ),
            array( 'id' => 'review', 'name' => $this->translate('Review Step') ),
            array( 'id' => 'custom', 'name' => $this->translate('Custom Location') )
        );
    }

    /**
     * Internal method to be called once the checkout context is known
     *
     * @param mixed $storeId
     * @param string $email
     * @param boolean $optin
     */
    protected function _subscribeAfterCheckout($storeId, $email, $optin)
    {
        if ($this->_helper->isCheckoutEnabled('store', $storeId)) {
            if ($optin) {
                $subscriber = $this->_subscribers->getByEmail($email);
                if (empty($subscriber) || $subscriber->getSubscriberStatus() != 1) {
                    $this->_subscribers->subscribe($email, false, 'checkout');
                }
            }
        }
    }
}
