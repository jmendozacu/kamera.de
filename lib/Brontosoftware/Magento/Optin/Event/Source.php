<?php
/**
 * This file was generated by the ConvertToLegacy class in bronto-legacy.
 * The purpose of the conversion was to maintain PSR-0 compliance while
 * the main development focuses on modern styles found in PSR-4.
 *
 * For the original:
 * @see src/Bronto/Magento/Optin/Event/Source.php
 */

class Brontosoftware_Magento_Optin_Event_Source implements Brontosoftware_Magento_Connector_Event_SourceInterface, Brontosoftware_Magento_Connector_Event_ContextProviderInterface
{
    private $_helper;

    /**
     * @param Brontosoftware_Magento_Optin_SettingsInterface $helper
     */
    public function __construct(
        Brontosoftware_Magento_Optin_SettingsInterface $helper
    ) {
        $this->_helper = $helper;
    }

    /**
     * @see parent
     */
    public function create($subscriber)
    {
        return array(
            'location' => $subscriber->getLocation(),
            'ignore_status' => $subscriber->getIgnoreStatus(),
            'uniqueKey' => implode('.', array(
                'optin',
                $this->_brontoStatus($subscriber),
                $subscriber->getId()
            ))
        );
    }

    /**
     * @see parent
     */
    public function getEventType()
    {
        return 'subscriber';
    }

    /**
     * @see parent
     */
    public function action($subscriber)
    {
        return 'replace';
    }

    /**
     * @see parent
     */
    public function transform($subscriber)
    {
        $status = null;
        if (!$subscriber->getIgnoreStatus()) {
            $status = $this->_brontoStatus($subscriber);
        }
        $eventData = array(
            'contact' => array(
                'email' => $subscriber->getSubscriberEmail(),
                'status' => $status
            )
        );
        $lists = array();
        if ($subscriber->getLocation() == 'checkout') {
            $sourceList = $this->_helper->getCheckoutSource('store', $subscriber->getStoreId());
            if (!empty($sourceList)) {
                $lists[] = $sourceList;
            }
        }
        if ($status == 'unsub') {
            $eventData['remove'] = array(
                'lists' => array_merge($this->_helper->getRemoveFromListIds('store', $subscriber->getStoreId()), $lists)
            );
        } else {
            $eventData['add'] = array(
                'lists' => array_merge($this->_helper->getAddToListIds('store', $subscriber->getStoreId()), $lists)
            );
        }
        return $eventData;
    }

    /**
     * Gets the Bronto status for the Magento code
     *
     * @param mixed $subscriber
     * @return string
     */
    private function _brontoStatus($subscriber)
    {
        switch ($subscriber->getSubscriberStatus()) {
        case 1:
            return 'onboarding';
        case 3:
            return 'unsub';
        case 4:
            return 'unconfirmed';
        default:
            return 'transactional';
        }
    }
}
