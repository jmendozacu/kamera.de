<?php
/**
 * This file was generated by the ConvertToLegacy class in bronto-legacy.
 * The purpose of the conversion was to maintain PSR-0 compliance while
 * the main development focuses on modern styles found in PSR-4.
 *
 * For the original:
 * @see src/Bronto/Magento/Cart/ExtensionAbstract.php
 */

abstract class Brontosoftware_Magento_Cart_ExtensionAbstract extends Brontosoftware_Magento_Connector_Discovery_ExtensionPushEventAbstract implements Brontosoftware_Magento_Connector_Discovery_TransformEventInterface
{
    protected $_quoteRepo;

    /**
     * @param Brontosoftware_Magento_Core_Sales_QuoteManagementInterface $quoteRepo
     * @param Brontosoftware_Magento_Core_Store_ManagerInterface $storeManager
     * @param Brontosoftware_Magento_Connector_QueueManagerInterface $queueManager
     * @param Brontosoftware_Magento_Connector_SettingsInterface $connectorSettings
     * @param Brontosoftware_Magento_Connector_Event_HelperInterface $helper
     * @param Brontosoftware_Magento_Connector_Event_PlatformInterface $platform
     * @param Brontosoftware_Magento_Connector_Event_SourceInterface $source
     */
    public function __construct(
        Brontosoftware_Magento_Core_Sales_QuoteManagementInterface $quoteRepo,
        Brontosoftware_Magento_Core_Store_ManagerInterface $storeManager,
        Brontosoftware_Magento_Connector_QueueManagerInterface $queueManager,
        Brontosoftware_Magento_Connector_SettingsInterface $connectorSettings,
        Brontosoftware_Magento_Cart_SettingsInterface $helper,
        Brontosoftware_Magento_Connector_Event_PlatformInterface $platform,
        Brontosoftware_Magento_Connector_Event_SourceInterface $source
    ) {
        parent::__construct(
            $storeManager,
            $queueManager,
            $connectorSettings,
            $helper,
            $platform,
            $source);
        $this->_quoteRepo = $quoteRepo;
    }

    /**
     * @see parent
     */
    public function transformEvent($observer)
    {
        $data = array();
        $transform = $observer->getTransform();
        $event = $transform->getContext();
        $quote = $this->_quoteRepo->getById($event['id']);
        if (empty($quote)) {
            $quote = new Brontosoftware_Magento_Core_DataObject([
                'id' => $event['id'],
                'items_count' => 0
            ]);
            $quote->setStore($this->_storeManager->getStore($event['storeId']));
            $quote->isDeleted(true);
        } else {
            $quote->isDeleted($event['is_deleted']);
        }
        $quote->isObjectNew($event['is_new']);
        if (array_key_exists('tid', $event)) {
            $quote->setBrontoTid($event['tid']);
        }
        if (array_key_exists('emailAddress', $event)) {
            $quote->setCustomerEmail($event['emailAddress']);
        }
        if (array_key_exists('redirect_url', $event)) {
            $quote->setRedirectUrl($event['redirect_url']);
        }
        $data = $this->_source->transform($quote);
        $transform->setCart($data);
    }

    /**
     * Adds an API dropdown to the integration extension
     *
     * @param mixed $observer
     * @return void
     */
    public function integrationAdditional($observer)
    {
        $observer->getEndpoint()->addFieldToExtension('cart_recovery', array(
            'id' => 'toggle_api',
            'name' => $this->translate('Type'),
            'type' => 'select',
            'position' => 3,
            'typeProperties' => array(
              'options' => array(
                  array(
                      'id' => 'api',
                      'name' => $this->translate('API'),
                  ),
                  array(
                      'id' => 'js',
                      'name' => $this->translate('JavaScript')
                  )
              ),
              'default' => 'api'
            )
        ));

        $observer->getEndpoint()->addDependencyToExtension('cart_recovery', 'embed_code', array(
            'id' => 'toggle_api', 'values' => array('js')
        ));

        $observer->getEndpoint()->addFieldToExtension('cart_recovery', array(
            'id' => 'selectors',
            'name' => $this->translate('Email CSS Selectors'),
            'type' => 'text',
            'required' => true,
            'typeProperties' => array( 'default' => $this->_emailSelector() )
        ));
    }

    /**
     * @see parent
     */
    protected function _getObject($observer)
    {
        return $observer->getQuote();
    }

    /**
     * Default email selector for the platform
     *
     * @return string
     */
    protected function _emailSelector()
    {
        return '.validate-email';
    }
}
