<?php
/**
 * This file was generated by the ConvertToLegacy class in bronto-legacy.
 * The purpose of the conversion was to maintain PSR-0 compliance while
 * the main development focuses on modern styles found in PSR-4.
 *
 * For the original:
 * @see src/Bronto/Magento/Cart/Settings.php
 */

class Brontosoftware_Magento_Cart_Settings extends Brontosoftware_Magento_Integration_CartSettings implements Brontosoftware_Magento_Cart_SettingsInterface
{
    const BRONTO_CART_EMAIL = '__bmec_em';

    protected $_writer;

    /**
     * @param Brontosoftware_Magento_Core_Cookie_WriterInterface $writer
     * @param Brontosoftware_Magento_Core_EncryptorInterface $encrypt
     * @param Brontosoftware_Magento_Core_Cookie_ReaderInterface $cookies
     * @param Brontosoftware_Magento_Core_Config_ScopedInterface $config
     * @param Brontosoftware_Magento_Core_Store_UrlManagerInterface $urls
     */
    public function __construct(
        Brontosoftware_Magento_Core_Cookie_WriterInterface $writer,
        Brontosoftware_Magento_Core_EncryptorInterface $encrypt,
        Brontosoftware_Magento_Core_Cookie_ReaderInterface $cookies,
        Brontosoftware_Magento_Core_Config_ScopedInterface $config,
        Brontosoftware_Magento_Core_Store_UrlManagerInterface $urls
    ) {
        parent::__construct($encrypt, $cookies, $config, $urls);
        $this->_writer = $writer;
    }

    /**
     * @see parent
     */
    public function isEnabled($scope = 'default', $scopeId = null)
    {
        return (
            $this->isToggled($scope, $scopeId) &&
            $this->isCartRecoveryEnabled($scope, $scopeId)
        );
    }

    /**
     * @see parent
     */
    public function isToggled($scope = 'default', $scopeId = null)
    {
        return $this->_config->getValue(self::XML_PATH_API_TOGGLE, $scope, $scopeId) == 'api';
    }

    /**
     * @see parent
     */
    public function isShadowDom($scopeType = 'default', $scopeId = null)
    {
        return !$this->isToggled($scopeType, $scopeId) && parent::isShadowDom($scopeType, $scopeId);
    }

    /**
     * @see parent
     */
    public function getCartRecoveryEmail($quote)
    {
        $email = parent::getCartRecoveryEmail($quote);
        if (empty($email)) {
            $encoded = $this->_cookies->getCookie(self::BRONTO_CART_EMAIL, '');
            if (empty($encoded)) {
                return $email;
            }
            $encypted = rawurldecode($encoded);
            $email = $this->_encrypt->decrypt($encypted);
        }
        return $email;
    }

    /**
     * @see parent
     */
    public function getCartRecoverySelectors($scope = 'default', $scopeId = null)
    {
        return $this->_config->getValue(self::XML_PATH_RECOVERY_EMAIL, $scope, $scopeId);
    }

    /**
     * @see parent
     */
    public function setCartRecoveryCookie($email)
    {
        $encrypted = $this->_encryptEmail($email);
        if ($encrypted) {
            $this->_writer->setServerCookie(self::BRONTO_CART_EMAIL, $encrypted);
        }
    }

    /**
     * @see parent
     */
    protected function _encryptEmail($email)
    {
        return rawurlencode($this->_encrypt->encrypt($email));
    }
}
