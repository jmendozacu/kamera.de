<?php
/**
 * This file was generated by the ConvertToLegacy class in bronto-legacy.
 * The purpose of the conversion was to maintain PSR-0 compliance while
 * the main development focuses on modern styles found in PSR-4.
 *
 * For the original:
 * @see src/Bronto/Magento/Product/Redirector.php
 */

class Brontosoftware_Magento_Product_Redirector implements Brontosoftware_Magento_Connector_RedirectorInterface
{
    protected $_checkoutSession;
    protected $_storeManager;
    protected $_products;
    protected $_settings;
    protected $_logger;

    /**
     * @param Brontosoftware_Magento_Core_Store_ManagerInterface $storeManager
     * @param Brontosoftware_Magento_Core_Sales_CheckoutSessionInterface $checkoutSession
     * @param Brontosoftware_Magento_Core_Catalog_ProductCacheInterface $products
     * @param Brontosoftware_Magento_Product_SettingsInterface $settings
     * @param Brontosoftware_Magento_Core_Log_LoggerInterface $logger
     */
    public function __construct(
        Brontosoftware_Magento_Core_Store_ManagerInterface $storeManager,
        Brontosoftware_Magento_Core_Sales_CheckoutSessionInterface $checkoutSession,
        Brontosoftware_Magento_Core_Catalog_ProductCacheInterface $products,
        Brontosoftware_Magento_Product_SettingsInterface $settings,
        Brontosoftware_Magento_Core_Log_LoggerInterface $logger
    ) {
        $this->_storeManager = $storeManager;
        $this->_checkoutSession = $checkoutSession;
        $this->_settings = $settings;
        $this->_logger = $logger;
        $this->_products = $products;
    }

    /**
     * @see parent
     */
    public function redirectPath($observer)
    {
        $redirectUrl = '/';
        $request = $observer->getRequest();
        $productParam = $request->getParam('products', '');
        $store = $this->_storeManager->getStore(true);
        if ($this->_settings->isProductAddLink('store', $store)) {
            $cart = $this->_checkoutSession->getInitializedCart();
            $updated = false;
            foreach (explode(',', $productParam) as $productSku) {
                $product = $this->_products->getBySku($productSku, $store->getId());
                if ($product) {
                    try {
                        $result = $cart->addProduct($product);
                        if (is_string($result)) {
                            throw new RuntimeException($result);
                        }
                        $updated = true;
                        $redirectUrl = 'checkout/cart';
                    } catch (Exception $e) {
                        $this->_logger->critical($e);
                        $observer->getMessages()->addError($result);
                    }
                }
            }
            if ($updated) {
                $cart->save();
            }
        }
        $observer->getRedirect()->unsetParams(array('products'));
        $observer->getRedirect()->setPath($store->getUrl($redirectUrl));
    }
}
