<?php
/**
 * This file was generated by the ConvertToLegacy class in bronto-legacy.
 * The purpose of the conversion was to maintain PSR-0 compliance while
 * the main development focuses on modern styles found in PSR-4.
 *
 * For the original:
 * @see src/Bronto/Magento/Product/Settings.php
 */

class Brontosoftware_Magento_Product_Settings extends Brontosoftware_Magento_Core_Config_ContainerAbstract implements Brontosoftware_Magento_Product_SettingsInterface
{
    const EVENT_NAME = "brontosoftware_product_extra_fields";
    const EVENT_DEFAULT_FIELDS = "brontosoftware_product_default_fields";
    const EVENT_CUSTOM_FIELDS = "brontosoftware_product_custom_fields";
    const EVENT_ATTRIBUTE_FIELDS = "brontosoftware_product_attribute_fields";

    protected $_data;
    protected $_storeManager;
    protected $_eventManager;
    protected $_productRepo;
    protected $_caches = array();

    /**
     * @param Brontosoftware_Magento_Core_Config_ScopedInterface $config
     * @param Brontosoftware_Magento_Core_Config_FactoryInterface $data
     * @param Brontosoftware_Magento_Core_Event_ManagerInterface $eventManager
     * @param Brontosoftware_Magento_Core_Store_ManagerInterface $storeManager
     * @param Brontosoftware_Magento_Core_Catalog_ProductCacheInterface $productRepo
     */
    public function __construct(
        Brontosoftware_Magento_Core_Config_ScopedInterface $config,
        Brontosoftware_Magento_Core_Config_FactoryInterface $data,
        Brontosoftware_Magento_Core_Event_ManagerInterface $eventManager,
        Brontosoftware_Magento_Core_Store_ManagerInterface $storeManager,
        Brontosoftware_Magento_Core_Catalog_ProductCacheInterface $productRepo
    ) {
        parent::__construct($config);
        $this->_data = $data;
        $this->_storeManager = $storeManager;
        $this->_eventManager = $eventManager;
        $this->_productRepo = $productRepo;
    }

    /**
     * @see parent
     */
    public function isEnabled($scope = 'default', $scopeId = null)
    {
        return $this->_config->isSetFlag(self::XML_PATH_ENABLED, $scope, $scopeId);
    }

    /**
     * @see parent
     */
    public function isProductAddLink($scope = 'default', $scopeId = null)
    {
        return $this->_config->isSetFlag(self::XML_PATH_ADD_LINK, $scope, $scopeId);
    }

    /**
     * @see parent
     */
    public function getDefaultFields(Brontosoftware_Magento_Connector_RegistrationInterface $registration)
    {
        return $this->_dispatchFields(self::EVENT_DEFAULT_FIELDS, array(
            'registration' => $registration
        ));
    }

    /**
     * @see parent
     */
    public function getCustomFields(Brontosoftware_Magento_Connector_RegistrationInterface $registration)
    {
        return $this->_dispatchFields(self::EVENT_CUSTOM_FIELDS, array(
            'registration' => $registration
        ));
    }

    /**
     * @see parent
     */
    public function getFieldAttributes(Brontosoftware_Magento_Connector_RegistrationInterface $registration)
    {
        return $this->_dispatchFields(self::EVENT_ATTRIBUTE_FIELDS, array(
            'registration' => $registration
        ));
    }

    /**
     * @see parent
     */
    public function getEnabledStores($scope = 'default', $scopeId = null)
    {
        $stores = array();
        if ($scope != 'default') {
            $scope .= 's';
        }
        $data = $this->_data->getCollection()
            ->addFieldToFilter('path', array('like' => self::XML_PATH_SCOPES))
            ->addFieldToFilter('scope', array('eq' => $scope))
            ->addFieldToFilter('scope_id', array('eq' => $scopeId));
        foreach ($data as $config) {
            if ($config->getValue() == 1) {
                $code = substr($config->getPath(), strrpos($config->getPath(), '/') + 1);
                $store = $this->_storeManager->getStore($code);
                if ($store) {
                    $stores[$code] = $store->getId();
                }
            }
        }
        return $stores;
    }

    /**
     * @see parent
     */
    public function getFieldMapping($product)
    {
        $data = array();
        $originalProduct = $product;
        $mappings = $this->getAll($product->getStoreId());
        $scopes = $product->getScopes();
        $product->getResource()->load($product, $product->getId(), array_keys($mappings));
        $extraFields = $this->_dispatchFields(self::EVENT_NAME, array(
            'product' => $product,
            'mappings' => $mappings
        ));
        foreach ($mappings as $code => $field) {
            $product = $originalProduct;
            $attribute = false;
            $value = null;
            if (array_key_exists($code, $extraFields)) {
                $value = $extraFields[$code];
            } else {
                $attribute = $product->getResource()->getAttribute($code);
                $value = $product->getData($code);
                if ($attribute && !$attribute->getIsGlobal() && !empty($scopes)) {
                    foreach ($scopes as $scope => $scopeId) {
                        $scopedField = "{$code}_{$scope}";
                        $product = $this->_productRepo->getById($originalProduct->getId(), $scopeId);
                        $scopedValue = $product->getData($code);
                        if ($product) {
                            $scopedValue = $this->_processAttributeValue($attribute, $scopedValue, $product);
                        }
                        $data[$scopedField] = $scopedValue;
                    }
                }
            }
            $data[$code] = $this->_processAttributeValue($attribute, $value, $product);
        }
        return $data;
    }

    /**
     * @see parent
     */
    public function getAll($storeId = null)
    {
        $store = $this->_storeManager->getStore($storeId);
        if (!array_key_exists($store->getId(), $this->_caches)) {
            $this->_caches[$store->getId()] = $this->_getAllDefaults($store) + $this->_getAllCustoms($store);
        }
        return $this->_caches[$store->getId()];
    }

    /**
     * Returns the converted type for the value / attribute
     *
     * @param mixed $attribute
     * @param mixed $value
     * @param mixed $product
     * @return mixed
     */
    protected function _processAttributeValue($attribute, $value, $product)
    {
        if (is_null($value)) {
            return '';
        }
        if (empty($attribute)) {
            return $value;
        }
        // Special case the image
        if (preg_match('/Image$/', get_class($attribute->getFrontend()))) {
            $value = $this->_productRepo->getImage($product, $attribute->getAttributeCode());
        }
        switch ($attribute->getFrontendInput()) {
        case 'select':
            return $attribute->getSource()->getOptionText($value);
        case 'multiselect':
            $values = array();
            if (!is_array($value)) {
              $value = explode(',', $value);
            }
            if (!is_array($value)) {
              $value = array($value);
            }
            $source = $attribute->getSource();
            foreach ($value as $val) {
              $values[] = $source->getOptionText($val);
            }
            return implode(',', $values);
        case 'date':
        case 'datetime':
            return date('c', strtotime($value));
        default:
            return $value;
        }
    }

    /**
     * Gets a collection of fields used by the extension in decoupled
     *
     * @param string $eventName
     * @param array $eventArgs
     * @return array
     */
    protected function _dispatchFields($eventName, $eventArgs = array())
    {
        $container = new Brontosoftware_Magento_Core_DataObject(array('fields' => array()));
        $this->_eventManager->dispatch($eventName, $eventArgs + array(
            'container' => $container
        ));
        return $container->getFields();
    }

    /**
     * Scans teh DB for stored custom mappings
     *
     * @param mixed $store
     * @return array
     */
    protected function _getAllCustoms($store)
    {
        $specificity = array();
        $savedAttributes = array();
        $data = $this->_data
            ->getCollection()
            ->addPathFilter(self::XML_PATH_CUSTOMS);
        foreach ($data as $config) {
            $isValid = $this->_validScope($config, $store);
            if ($isValid && $this->_moreSpecific($config, $specificity)) {
                if (array_key_exists($config->getPath(), $specificity)) {
                    list($scope, $value) = $specificity[$config->getPath()];
                    unset($savedAttributes[$value]);
                }
                $mapping = unserialize($config->getValue());
                $code = $mapping['attribute'];
                $savedAttributes[$mapping['attribute']] = $code;
                $specificity[$config->getValue()] = array($config->getScope(), $mapping['attribute']);
            }
        }
        return $savedAttributes;
    }

    /**
     * Scans the DB for stored default mappings
     *
     * @param mixed $store
     * @return array
     */
    protected function _getAllDefaults($store)
    {
        $specificity = array();
        $savedAttributes = array();
        $data = $this->_data
            ->getCollection()
            ->addPathFilter(self::XML_PATH_DEFAULTS);
        foreach ($data as $config) {
            $isValid = $this->_validScope($config, $store);
            if ($isValid && $this->_moreSpecific($config, $specificity)) {
                if (array_key_exists($config->getPath(), $specificity)) {
                    list($scope, $value) = $specificity[$config->getPath()];
                    unset($savedAttributes[$value]);
                }
                $code = $config->getValue();
                $field = substr($config->getPath(), strrpos($config->getPath(), '/') + 1);
                $savedAttributes[$code] = $field;
                $specificity[$config->getPath()] = array($config->getScope(), $code);
            }
        }
        return $savedAttributes;
    }
}
