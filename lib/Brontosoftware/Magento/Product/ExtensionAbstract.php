<?php
/**
 * This file was generated by the ConvertToLegacy class in bronto-legacy.
 * The purpose of the conversion was to maintain PSR-0 compliance while
 * the main development focuses on modern styles found in PSR-4.
 *
 * For the original:
 * @see src/Bronto/Magento/Product/ExtensionAbstract.php
 */

abstract class Brontosoftware_Magento_Product_ExtensionAbstract extends Brontosoftware_Magento_Connector_Discovery_AdvancedExtensionAbstract implements Brontosoftware_Magento_Connector_Discovery_GroupInterface, Brontosoftware_Magento_Product_CatalogMapperInterface, Brontosoftware_Magento_Connector_Discovery_TransformEventInterface
{
    private static $_defaultCodes = array(
        'product_id' => array('sku' => 'SKU'),
        'parent_product_id' => array('Parent ID'),
        'product_category' => array('Category'),
        'price' => array('price' => 'Price'),
        'sale_price' => array('special_price' => 'Special Price'),
        'product_url' => array('URL'),
        'image_url' => array('image' => 'Base Image'),
        'title' => array('name' => 'Name'),
        'description' => array('description' => 'Description'),
        'Sale_Price_Effective_End_Date' => array('special_to_date' => 'Special Price To Date'),
        'Sale_Price_Effective_Start_Date' => array('special_from_date' => 'Special Price From Date'),
    );

    private static $_remainingCodes = array(
        'age_group' => array('none' => 'Age Group'),
        'availability_date' => array('none' => 'Availability Date'),
        'brand' => array('none' => 'Brand'),
        'color' => array('none' => 'Color'),
        'condition' => array('none' => 'Condition'),
        'gtin' => array('none' => 'GTIN'),
        'gender' => array('none' => 'Gender'),
        'isbn' => array('none' => 'ISBN'),
        'inventory_threshold' => array('none' => 'Inventory Threshold'),
        'mpn' => array('none' => 'MPN'),
        'margin' => array('none' => 'Margin'),
        'mobile_url' => array('none' => 'Mobile URL'),
        'size' => array('none' => 'Size'),
        'upc' => array('none' => 'UPC')
    );

    private static $_specialCodes = array(
        'parent_product_id' => true,
        'product_category' => true,
        'product_url' => true,
        'product_category_tree' => true,
        'product_category_all_lowest' => true,
        'product_category_first_lowest' => true
    );

    private static $_customFields = array(
        'product_category_tree' => 'Product Category Tree',
        'product_category_all_lowest' => 'All Lowest Product Categories',
        'product_category_first_lowest' => 'First Lowest Product Category'
    );

    protected $_middleware;
    protected $_registrations;
    protected $_productRepo;
    protected $_attributes;

    /**
     * @param Brontosoftware_Magento_Core_Catalog_ProductAttributeCacheInterface $attributes
     * @param Brontosoftware_Magento_Connector_MiddlewareInterface $middleware
     * @param Brontosoftware_Magento_Connector_RegistrationManagerInterface $registrations
     * @param Brontosoftware_Magento_Core_Catalog_ProductCacheInterface $productRepo
     * @param Brontosoftware_Magento_Core_App_EmulationInterface $appEmulation
     * @param Brontosoftware_Magento_Core_Store_ManagerInterface $storeManager
     * @param Brontosoftware_Magento_Connector_QueueManagerInterface $queueManager
     * @param Brontosoftware_Magento_Connector_SettingsInterface $connectorSettings
     * @param Brontosoftware_Magento_Connector_Event_HelperInterface $helper
     * @param Brontosoftware_Magento_Connector_Event_PlatformInterface $platform
     * @param Brontosoftware_Magento_Connector_Event_SourceInterface $source
     */
    public function __construct(
        Brontosoftware_Magento_Core_Catalog_ProductAttributeCacheInterface $attributes,
        Brontosoftware_Magento_Connector_MiddlewareInterface $middleware,
        Brontosoftware_Magento_Connector_RegistrationManagerInterface $registrations,
        Brontosoftware_Magento_Core_Catalog_ProductCacheInterface $productRepo,
        Brontosoftware_Magento_Core_App_EmulationInterface $appEmulation,
        Brontosoftware_Magento_Core_Store_ManagerInterface $storeManager,
        Brontosoftware_Magento_Connector_QueueManagerInterface $queueManager,
        Brontosoftware_Magento_Connector_SettingsInterface $connectorSettings,
        Brontosoftware_Magento_Connector_Event_HelperInterface $helper,
        Brontosoftware_Magento_Connector_Event_PlatformInterface $platform,
        Brontosoftware_Magento_Connector_Event_SourceInterface $source
    ) {
        parent::__construct(
            $appEmulation,
            $storeManager,
            $queueManager,
            $connectorSettings,
            $helper,
            $platform,
            $source);
        $this->_attributes = $attributes;
        $this->_middleware = $middleware;
        $this->_registrations = $registrations;
        $this->_productRepo = $productRepo;
    }

    /**
     * @see parent
     */
    public function getSortOrder()
    {
        return 25;
    }

    /**
     * @see parent
     */
    public function getEndpointId()
    {
        return 'product';
    }

    /**
     * @see parent
     */
    public function getEndpointName()
    {
        return $this->translate('Products');
    }

    /**
     * @see parent
     */
    public function getEndpointIcon()
    {
        return 'mage-icon-products';
    }

    /**
     * Iterate over all of the registrations and push
     *
     * @param mixed $observer
     * @return void
     */
    public function pushChangesToAll($observer)
    {
        $product = $observer->getProduct();
        $siteHash = array();
        foreach ($this->_registrations->getAll() as $registration) {
            if (array_key_exists($registration->getConnectorKey(), $siteHash)) {
                continue;
            }
            $defaultStoreId = $this->_middleware->defaultStoreId($registration->getScope(), $registration->getScopeId());
            $scopes = $this->_helper->getEnabledStores($registration->getScope(), $registration->getScopeId());
            if ($product->dataHasChangedFor('sku')) {
                $originalSku = $product->getOrigData('sku');
                $archivalProduct = new Brontosoftware_Magento_Core_DataObject([
                    'id' => $product->getId(),
                    'store_id' => $defaultStoreId,
                    'scopes' => $scopes,
                    'sku' => $originalSku,
                    'status' => 2
                ]);
                $archivalObserver = new Brontosoftware_Magento_Core_DataObject([
                    'product' => $archivalProduct
                ]);
                $this->pushChanges($archivalObserver);
            }
            $product->setStoreId($defaultStoreId);
            $product->setScopes($scopes);
            $this->pushChanges($observer);
            $siteHash[$registration->getConnectorKey()] = $registration;
        }
    }

    /**
     * @see parent
     */
    public function transformEvent($observer)
    {
        $data = array();
        $transform = $observer->getTransform();
        $event = $transform->getContext();
        $product = $this->_productRepo->getById($event['id'], $event['storeId']);
        if ($product) {
            $product->setScopes($event['scopes']);
            $data = $this->_source->transform($product);
            $data['fields']['sku'] = $event['sku'];
        }
        $transform->setProduct($data);
    }

    /**
     * Handle the endpoint page through products
     *
     * @param mixed $observer
     * @return void
     */
    public function sendProductUpdates($observer)
    {
        $results = array();
        $registration = $observer->getScript()->getRegistration();
        $mappings = $this->_helper->getAll($this->_middleware->defaultStoreId($registration->getScope(), $registration->getScopeId()));
        foreach ($this->_helper->getFieldAttributes($registration) as $field) {
            if (array_key_exists($field['attribute_code'], $mappings)) {
                $field['id'] = $mappings[$field['attribute_code']];
                $results[] = array('context' => $field);
            }
        }
        $observer->getScript()->setResults($results);
    }

    /**
     * @see parent
     */
    public function advancedAdditional($observer)
    {
        $observer->getEndpoint()->addOptionToScript("test", "jobName", array(
            'id' => 'test_' . $this->getEndpointId(),
            'name' => $this->translate('Product')
        ));

        $observer->getEndpoint()->addFieldToScript('test', array(
            'id' => 'productSku',
            'name' => $this->translate('Product SKU'),
            'type' => 'text',
            'position' => 15,
            'depends' => array(
                array(
                    'id' => 'jobName',
                    'values' => array('test_'.$this->getEndpointId())
                )
            )
        ));

        $observer->getEndpoint()->addOptionToScript('historical', 'jobName', array(
            'id' => $this->getEndpointId(),
            'name' => $this->getEndpointName()
        ));

        $observer->getEndpoint()->addOptionToScript('event', 'jobName', array(
            'id' => 'triggerCatalogUpload',
            'name' => $this->translate('Sync Product Catalog Fields'),
        ));

        $observer->getEndpoint()->addOptionToScript('event', 'moduleSettings', array(
            'id' => $this->getEndpointId(),
            'name' => $this->getEndpointName()
        ));
    }

    /**
     * @see parent
     */
    public function gatherEndpoints($observer)
    {
        $observer->getDiscovery()->addGroupHelper($this);
    }

    /**
     * @see parent
     */
    public function endpointInfo($observer)
    {
        $scopeFields = array();
        $registration = $observer->getRegistration();
        foreach ($this->_middleware->storeScopes($registration) as $storeId) {
            $store = $this->_storeManager->getStore($storeId);
            $scopeFields[] = array(
                'id' => $store->getCode(),
                'name' => $store->getName(),
                'type' => 'boolean',
                'required' => true,
                'typeProperties' => array( 'default' => false )
            );
        }

        $delimiters = array();
        foreach (array(',' => 'Comma', '|' => 'Pipe', ';' => 'Semi-colon') as $id => $name) {
            $delimiters[] = array( 'id' => $id, 'name' => $this->translate($name) );
        }
        $levels = array();
        $numberToNames = array('', 'Second ', 'Third ', 'Fourth ');
        foreach (range(1, 4) as $number) {
            $name = $numberToNames[$number - 1] . 'Highest Subcategory';
            $levels[] = array( 'id' => 'highest-' . $number, 'name' => $this->translate($name) );
        }
        $levels[] = array( 'id' => 'lowest', 'name' => $this->translate('Lowest Subcategory') );
        $observer->getEndpoint()->addExtension(array(
            'id' => 'settings',
            'name' => $this->translate('Settings'),
            'fields' => array(
                array(
                    'id' => 'enabled',
                    'name' => $this->translate('Enabled'),
                    'type' => 'boolean',
                    'required' => true,
                    'typeProperties' => array( 'default' => false )
                ),
                array(
                    'id' => 'categoryFormat',
                    'name' => $this->translate('Category Format'),
                    'type' => 'select',
                    'required' => true,
                    'typeProperties' => array(
                        'default' => 'urlKey',
                        'options' => array(
                            array( 'id' => 'urlKey', 'name' => $this->translate('URL Key') ),
                            array( 'id' => 'name', 'name' => $this->translate('Name') )
                        )
                    )
                ),
                array(
                    'id' => 'categoryDelimiter',
                    'name' => $this->translate('Category Leaf Delimiter'),
                    'type' => 'select',
                    'required' => true,
                    'typeProperties' => array(
                        'default' => 'space',
                        'options' => array_merge(array(array('id' => 'space', 'name' => $this->translate('Space'))), $delimiters)
                    )
                ),
                array(
                    'id' => 'categoryBranchDelimiter',
                    'name' => $this->translate('Category Branch Delimiter'),
                    'type' => 'select',
                    'required' => true,
                    'typeProperties' => array(
                        'default' => ',',
                        'options' => $delimiters
                    )
                ),
                array(
                    'id' => 'categorySpecificity',
                    'name' => $this->translate('Category Level'),
                    'type' => 'select',
                    'required' => true,
                    'typeProperties' => array(
                        'default' => 'lowest',
                        'options' => $levels
                    ),
                ),
                array(
                    'id' => 'categoryBroadness',
                    'name' => $this->translate('Category Level Tiebreaker'),
                    'type' => 'select',
                    'required' => true,
                    'depends' => array( array( 'id' => 'categorySpecificity', 'values' => array( 'highest-1', 'highest-2', 'highest-3', 'highest-4' ) ) ),
                    'typeProperties' => array(
                        'default' => 'most',
                        'options' => array(
                            array( 'id' => 'most', 'name' => $this->translate('Most Children') ),
                            array( 'id' => 'least', 'name' => $this->translate('Least Children') )
                        )
                    )
                )
            )
        ));

        if (!empty($scopeFields)) {
            $observer->getEndpoint()->addExtension(array(
                'id' => 'scopes',
                'name' => $this->translate('Scopes'),
                'fields' => $scopeFields
            ));
        }

        $defaultFields = array();
        $customFields = array();
        $defaultOptions = $this->_helper->getDefaultFields($registration);
        foreach ($this->_helper->getCustomFields($registration) as $option) {
            if (array_key_exists($option['id'], $defaultOptions)) {
                continue;
            }
            $option['name'] = $this->translate($option['name']) . ' (' . $option['id'] . ')';
            $customFields[] = $option;
        }
        foreach ($defaultOptions as $defaultId => $field) {
            $selectedId = null;
            foreach ($field as $fieldId => $fieldLabel) {
                $selectedId = $fieldId == 'none' ? null : $fieldId;
                if (empty($fieldId)) {
                    $selectedId = $defaultId;
                }
            }
            $typeProperties = array();
            if ($selectedId) {
                $typeProperties['default'] = $selectedId;
                $typeProperties['options'] = array_merge(array(array('id' => $selectedId, 'name' => $this->translate($fieldLabel))), $customFields);
            } else {
                $typeProperties['options'] = $customFields;
            }
            $defaultFields[] = array(
                'id' => $defaultId,
                'name' => $defaultId,
                'type' => 'select',
                'required' => array_key_exists('default', $typeProperties),
                'typeProperties' => $typeProperties
            );
        }

        $observer->getEndpoint()->addExtension(array(
            'id' => 'default_fields',
            'name' => $this->translate('Default Fields'),
            'fields' => $defaultFields
        ));

        $observer->getEndpoint()->addObject(array(
            'id' => 'custom_fields',
            'name' => $this->translate('Mapping'),
            'shortName' => $this->translate('Mapping'),
            'identifiable' => true,
            'fields' => array(
                array(
                    'id' => 'attribute',
                    'name' => $this->translate('Product Attribute'),
                    'type' => 'select',
                    'typeProperties' => array(
                        'options' => $customFields
                    )
                )
            )
        ));
    }

    /**
     * @see parent
     */
    public function setExtraFields($observer)
    {
        $product = $observer->getProduct();
        $mappings = $observer->getMappings();
        $extra = $observer->getContainer()->getFields();
        $extra['product_url'] = $this->_productRepo->getUrl($product);
        $extra['parent_product_id'] = '';
        $parent = $this->_productRepo->getParent($product->getId());
        if ($parent) {
            $extra['parent_product_id'] = $parent->getSku();
        }
        $extra['product_category'] = $this->_productRepo->getCategory($product);
        if (array_key_exists('product_category_tree', $mappings)) {
            $extra['product_category_tree'] = $this->_productRepo->getCategory($product, 'tree');
        }
        if (array_key_exists('product_category_all_lowest', $mappings)) {
            $extra['product_category_all_lowest'] = $this->_productRepo->getCategory($product, 'all_leaves');
        }
        if (array_key_exists('product_category_first_lowest', $mappings)) {
            $extra['product_category_first_lowest'] = $this->_productRepo->getCategory($product, 'first_lowest');
        }
        $observer->getContainer()->setFields($extra);
    }

    /**
     * @see parent
     */
    public function setDefaultFields($observer)
    {
        $fields = $observer->getContainer()->getFields();
        $observer->getContainer()->setFields($fields + self::$_defaultCodes + self::$_remainingCodes);
    }

    /**
     * @see parent
     */
    public function setFieldAttributes($observer)
    {
        $fields = $observer->getContainer()->getFields();
        foreach ($this->_attributes->getCollection() as $attribute) {
            $fields[] = array(
                'id' => $attribute->getAttributeCode(),
                'attribute_code' => $attribute->getAttributeCode(),
                'frontend_label' => $attribute->getFrontendLabel(),
                'frontend_type' => $attribute->getFrontendInput(),
                'is_global' => (bool)$attribute->getIsGlobal()
            );
        }
        foreach (self::$_specialCodes as $code => $isGlobal) {
            if (array_key_exists($code, self::$_defaultCodes)) {
                $label = self::$_defaultCodes[$code][0];
            } else {
                $label = self::$_customFields[$code];
            }
            $fields[] = array(
                'attribute_code' => $code,
                'frontend_label' => $label,
                'frontend_type' => 'text',
                'is_global' => $isGlobal
            );
        }
        $observer->getContainer()->setFields($fields);
    }

    /**
     * @see parent
     */
    public function setCustomFields($observer)
    {
        $fields = $observer->getContainer()->getFields();
        $fields = array_merge($fields, $this->_attributes->getOptionArray());
        foreach (self::$_customFields as $id => $name) {
            $fields[] = array( 'id' => $id, 'name' => $this->translate($name) );
        }
        $observer->getContainer()->setFields($fields);
    }

    /**
     * Implementors will create a product collection that
     * can be filtered down according to user input
     *
     * @return mixed
     */
    abstract protected function _collection();

    /**
     * @see parent
     */
    protected function _sendHistorical($registration, $data)
    {
        $products = $this->_collection();
        if (array_key_exists('startTime', $data)) {
            $startTime = $data['startTime'];
            if ($startTime) {
                $products->addFieldToFilter('created_at', array('gt' => $startTime));
            }
        }
        if (array_key_exists('endTime', $data)) {
            $endTime = $data['endTime'];
            if ($endTime) {
                $products->addFieldToFilter('created_at', array('lt' => $endTime));
            }
        }
        return $this->_attachScopeFilter($registration, $products);
    }

    /**
     * Attach scope filter based on the registration for the
     * products coming in
     *
     * @param Brontosoftware_Magento_Connector_RegistrationInterface $registration
     * @param mixed $products
     * @return mixed
     */
    protected function _attachScopeFilter($registration, $products)
    {
        switch ($registration->getScope()) {
            case 'website':
                $products->addWebsiteFilter($registration->getScopeId());
                break;
            case 'store':
                $products->addStoreFilter($registration->getScopeId());
                break;
            default:
                return $products;
        }
        return $products;
    }

    /**
     * @see parent
     */
    protected function _sendTest($registration, $data)
    {
        $products = array();
        if (array_key_exists('productSku', $data)) {
            $products = $this->_collection()->addFieldToFilter('sku', array(
                'eq' => $data['productSku']
            ));
            return $this->_attachScopeFilter($registration, $products);
        }
        return $products;
    }
}
