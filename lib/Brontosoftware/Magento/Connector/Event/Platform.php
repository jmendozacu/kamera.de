<?php
/**
 * This file was generated by the ConvertToLegacy class in bronto-legacy.
 * The purpose of the conversion was to maintain PSR-0 compliance while
 * the main development focuses on modern styles found in PSR-4.
 *
 * For the original:
 * @see src/Bronto/Magento/Connector/Event/Platform.php
 */

class Brontosoftware_Magento_Connector_Event_Platform implements Brontosoftware_Magento_Connector_Event_PlatformInterface
{
    const SARLACC = 'https://sarlacc.brontops.com/ingest';
    const SARLACC_TYPE = 'BrontoRecord';
    const SARLACC_VERSION = '1.0.0';

    protected $_client;
    protected $_encoder;
    protected $_settings;
    protected $_logger;
    protected $_meta;

    /**
     * @param Brontosoftware_Transfer_Adapter $client
     * @param Brontosoftware_Serialize_BiDirectional $encoder
     * @param Brontosoftware_Magento_Connector_SettingsInterface $settings
     * @param Brontosoftware_Magento_Core_Log_LoggerInterface $logger
     * @param Brontosoftware_Magento_Core_MetaInterface $meta
     */
    public function __construct(
        Brontosoftware_Transfer_Adapter $client,
        Brontosoftware_Serialize_BiDirectional $encoder,
        Brontosoftware_Magento_Connector_SettingsInterface $settings,
        Brontosoftware_Magento_Core_Log_LoggerInterface $logger,
        Brontosoftware_Magento_Core_MetaInterface $meta
    ) {
        $this->_client = $client;
        $this->_encoder = $encoder;
        $this->_settings = $settings;
        $this->_logger = $logger;
        $this->_meta = $meta;
    }

    /**
     * @see parent
     */
    public function annotate(Brontosoftware_Magento_Connector_Event_SourceInterface $source, $object, $action = null, $storeId = null, $context = array())
    {
        $eventData = $source->transform($object);
        if (empty($context) && isset($eventData['context'])) {
            $context = $eventData['context'];
            unset($eventData['context']);
        }
        $data = array(
            'account' => $this->_account($storeId),
            'platform' => $this->_platform(),
            'action' => is_null($action) ? $source->action($object) : $action,
            'type' => $source->getEventType(),
            $source->getEventType() => $eventData
        );
        if (!empty($context)) {
            $data['context'] = $context;
        }
        return array(
            'type' => self::SARLACC_TYPE,
            'version' => self::SARLACC_VERSION,
            'data' => $data
        );
    }

    /**
     * @see parent
     */
    public function dispatch($event)
    {
        try {
            $response = $this->_client->createRequest('POST', self::SARLACC)
                ->header('Content-Type', $this->_encoder->getMimeType())
                ->body($this->_encoder->encode($event))
                ->respond();
            return $response->code() < 300;
        } catch (Exception $e) {
            $this->_logger->critical($e);
            return false;
        }
    }

    /**
     * Gets the account information for the platform
     *
     * @param mixed $storeId
     * @return array
     */
    protected function _account($storeId = null)
    {
        return array(
            'siteId' => $this->_settings->getSiteId('store', $storeId),
            'maskId' => $this->_settings->getMaskId('store', $storeId)
        );
    }

    /**
     * Gets the platform information for the platform
     *
     * @return array
     */
    private function _platform()
    {
        return array(
            'id' => Brontosoftware_Magento_Core_MetaInterface::PLATFORM_ID,
            'label' => $this->_meta->getName(),
            'version' => $this->_meta->getVersion() . ' (' . $this->_meta->getEdition() . ')'
        );
    }
}
