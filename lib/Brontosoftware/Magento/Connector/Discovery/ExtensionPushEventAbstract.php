<?php
/**
 * This file was generated by the ConvertToLegacy class in bronto-legacy.
 * The purpose of the conversion was to maintain PSR-0 compliance while
 * the main development focuses on modern styles found in PSR-4.
 *
 * For the original:
 * @see src/Bronto/Magento/Connector/Discovery/ExtensionPushEventAbstract.php
 */

abstract class Brontosoftware_Magento_Connector_Discovery_ExtensionPushEventAbstract implements Brontosoftware_Magento_Connector_Discovery_PushChangesInterface, Brontosoftware_Magento_Connector_Discovery_TranslationInterface
{
    protected $_helper;
    protected $_platform;
    protected $_source;
    protected $_pushLogic;
    protected $_storeManager;
    protected $_connectorSettings;

    /**
     * @param Brontosoftware_Magento_Core_Store_ManagerInterface $storeManager
     * @param Brontosoftware_Magento_Connector_QueueManagerInterface $queueManager
     * @param Brontosoftware_Magento_Connector_SettingsInterface $connectorSettings
     * @param Brontosoftware_Magento_Connector_Event_HelperInterface $helper
     * @param Brontosoftware_Magento_Connector_Event_PlatformInterface $platform
     * @param Brontosoftware_Magento_Connector_Event_SourceInterface $source
     */
    public function __construct(
        Brontosoftware_Magento_Core_Store_ManagerInterface $storeManager,
        Brontosoftware_Magento_Connector_QueueManagerInterface $queueManager,
        Brontosoftware_Magento_Connector_SettingsInterface $connectorSettings,
        Brontosoftware_Magento_Connector_Event_HelperInterface $helper,
        Brontosoftware_Magento_Connector_Event_PlatformInterface $platform,
        Brontosoftware_Magento_Connector_Event_SourceInterface $source
    ) {
        $this->_helper = $helper;
        $this->_platform = $platform;
        $this->_source = $source;
        $this->_storeManager = $storeManager;
        $this->_connectorSettings = $connectorSettings;
        $this->_pushLogic = new Brontosoftware_Magento_Connector_Event_PushLogic(
            $queueManager,
            $connectorSettings,
            $helper,
            $platform,
            $source,
            $this->_contextProvider());
    }

    /**
     * @see parent
     */
    public function pushChanges($observer)
    {
        $object = $this->_getObject($observer);
        $storeId = $object->getStoreId();
        if (is_null($storeId) || $storeId === false) {
            $storeId = true;
        }
        $this->_pushLogic->pushEvent($object, $this->_storeManager->getStore($storeId));
    }

    /**
     * Yanks the object out of this observed change
     *
     * @param mixed $observer
     * @return mixed
     */
    protected function _getObject($observer)
    {
        return $observer->getData($this->_source->getEventType());
    }

    /**
     * Gets a context provider transformer
     *
     * @return Brontosoftware_Magento_Connector_Event_ContextProviderInterface
     */
    protected function _contextProvider()
    {
        return null;
    }
}
