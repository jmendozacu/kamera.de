<?php
/**
 * This file was generated by the ConvertToLegacy class in bronto-legacy.
 * The purpose of the conversion was to maintain PSR-0 compliance while
 * the main development focuses on modern styles found in PSR-4.
 *
 * For the original:
 * @see src/Bronto/Magento/Core/Catalog/ProductCacheAbstract.php
 */

abstract class Brontosoftware_Magento_Core_Catalog_ProductCacheAbstract implements Brontosoftware_Magento_Core_Catalog_ProductCacheInterface
{
    protected $_imageHelper;
    protected $_storeManager;
    protected $_resolver;

    /**
     * @param Brontosoftware_Magento_Core_Catalog_ImageHelperInterface $imageHelper
     * @param Brontosoftware_Magento_Core_Store_ManagerInterface $storeManager
     * @param Brontosoftware_Magento_Core_Catalog_ProductCategoryResolverInterface $resolver
     */
    public function __construct(
        Brontosoftware_Magento_Core_Catalog_ImageHelperInterface $imageHelper,
        Brontosoftware_Magento_Core_Store_ManagerInterface $storeManager,
        Brontosoftware_Magento_Core_Catalog_ProductCategoryResolverInterface $resolver
    ) {
        $this->_imageHelper = $imageHelper;
        $this->_storeManager = $storeManager;
        $this->_resolver = $resolver;
    }

    /**
     * @see parent
     */
    public function isVisible($product)
    {
        return $product->getVisibility() != 1;
    }

    /**
     * @see parent
     */
    public function getCategory($product, $resolver = 'single')
    {
        return $this->_resolver->getCategory($product, $resolver);
    }

    /**
     * @see parent
     */
    public function getVisibleProduct($product, $parentId = null, $storeId = null)
    {
        if (is_numeric($product)) {
            $product = $this->getById($product, $storeId);
        }
        if (is_null($product)) {
            return null;
        }
        if ($this->isVisible($product)) {
            return $product;
        }
        return $this->_parent($product, $parentId);
    }

    /**
     * @see parent
     */
    public function getDescription($product, $attribute = 'description', $parentId = null)
    {
        return $this->getVisibleProduct($product, $parentId)->getData($attribute);
    }

    /**
     * @see parent
     */
    public function getImage($product, $attribute = 'image', $parentId = null)
    {
        if ($product) {
            $image = $this->_imageHelper->getImageUrl($product, $attribute);
            if (preg_match('|/placeholder/|', $image) && $parent = $this->_parent($product, $parentId)) {
                return $this->_imageHelper->getImageUrl($parent, $attribute);
            } else {
                return $image;
            }
        } else {
            return $this->_imageHelper->getDefaultPlaceHolderUrl();
        }
    }

    /**
     * @see parent
     */
    public function getUrl($product, $parentId = null)
    {
        $product = $this->getVisibleProduct($product, $parentId);
        if ($product) {
            return $product->getUrlInStore(array(
                '_scope' => $product->getStoreId()
            ));
        }
        return $this->_storeManager->getStore(true)->getBaseUrl();
    }

    /**
     * Gets the parent product defaulting to parent first
     *
     * @param mixed $product
     * @param mixed $parentId
     * @return mixed
     */
    protected function _parent($product, $parentId = null)
    {
        if (!is_null($parentId)) {
            return $this->getById($parentId, $product->getStoreId());
        } else {
            return $this->getParent($product);
        }
    }
}
