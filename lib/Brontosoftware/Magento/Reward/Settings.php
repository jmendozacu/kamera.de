<?php
/**
 * This file was generated by the ConvertToLegacy class in bronto-legacy.
 * The purpose of the conversion was to maintain PSR-0 compliance while
 * the main development focuses on modern styles found in PSR-4.
 *
 * For the original:
 * @see src/Bronto/Magento/Reward/Settings.php
 */

class Brontosoftware_Magento_Reward_Settings implements Brontosoftware_Magento_Contact_AttributeSettingsInterface
{
    public static $_fields = array(
        'reward_points' => array('name' => 'Reward Points', 'type' => 'integer'),
        'reward_points_currency' => array('name' => 'Reward Currency', 'type' => 'float'),
        'reward_points_dollars' => array('name' => 'Reward Currency Formatted', 'type' => 'text')
    );

    public static $_methods = array(
        'getPointsBalance',
        'getCurrencyAmount',
        'getFormatedCurrencyAmount'
    );

    protected $_storeManager;
    protected $_rewards;

    /**
     * @param Brontosoftware_Magento_Core_Store_ManagerInterface $storeManager
     * @param Brontosoftware_Magento_Reward_ManagerInterface $rewards
     */
    public function __construct(
        Brontosoftware_Magento_Core_Store_ManagerInterface $storeManager,
        Brontosoftware_Magento_Reward_ManagerInterface $rewards
    ) {
        $this->_storeManager = $storeManager;
        $this->_rewards = $rewards;
    }

    /**
     * @see parent
     */
    public function getFields()
    {
        return self::$_fields;
    }

    /**
     * @see parent
     */
    public function getExtra($contact, $storeId = null)
    {
        $store = $this->_storeManager->getStore($storeId);
        $reward = $this->_rewards->getByCustomer($contact->getId(), $store->getWebsiteId());
        $defaults = array();
        foreach ($this->_methods() as $fieldId => $methodName) {
            $defaults[$fieldId] = '';
            if ($reward) {
                $defaults[$fieldId] = call_user_func(array($reward, $methodName));
            }
        }
        return $defaults;
    }

    /**
     * Gets field mapping to methods
     *
     * @return array
     */
    protected function _methods()
    {
        return array_combine(array_keys($this->getFields()), self::$_methods);
    }
}
