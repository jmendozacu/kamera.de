<?php
/**
 * This file was generated by the ConvertToLegacy class in bronto-legacy.
 * The purpose of the conversion was to maintain PSR-0 compliance while
 * the main development focuses on modern styles found in PSR-4.
 *
 * For the original:
 * @see src/Bronto/Magento/Integration/ExtensionAbstract.php
 */

abstract class Brontosoftware_Magento_Integration_ExtensionAbstract implements Brontosoftware_Magento_Connector_Discovery_ExtensionInterface, Brontosoftware_Magento_Connector_Discovery_GroupInterface
{
    /**
     * @see parent
     */
    public function getSortOrder()
    {
        return 90;
    }

    /**
     * @see parent
     */
    public function getEndpointName()
    {
        return $this->translate('Integrations');
    }

    /**
     * @see parent
     */
    public function getEndpointId()
    {
        return 'integration';
    }

    /**
     * @see parent
     */
    public function getEndpointIcon()
    {
        return 'mage-icon-integrations';
    }

    /**
     * @see parent
     */
    public function gatherEndpoints($observer)
    {
        $observer->getDiscovery()->addGroupHelper($this);
    }

    /**
     * @see parent
     */
    public function endpointInfo($observer)
    {
        $observer->getEndpoint()->addExtension(array(
            'id' => 'cart_recovery',
            'name' => $this->translate('Cart Recovery'),
            'fields' => array(
                array(
                    'id' => 'enabled',
                    'name' => $this->translate('Enabled'),
                    'type' => 'boolean',
                    'required' => true,
                    'typeProperties' => array(
                        'default' => false,
                        'bronto' => array( 'type' => 'cartRecovery' )
                    ),
                    'position' => 1
                ),
                array(
                    'id' => 'embed_code',
                    'name' => $this->translate('Embed Code'),
                    'type' => 'textarea',
                    'typeProperties' => array(
                        'bronto' => array( 'type' => 'cartRecoveryEmbed' )
                    ),
                    'depends' => array(
                        array(
                            'id' => 'enabled',
                            'values' => array(true)
                        )
                    ),
                    'position' => 5
                )
            )
        ));

        $observer->getEndpoint()->addExtension(array(
            'id' => 'popup_manager',
            'name' => $this->translate('Pop-Up Manager'),
            'fields' => array(
                array(
                    'id' => 'enabled',
                    'name' => $this->translate('Enabled'),
                    'type' => 'boolean',
                    'required' => true,
                    'typeProperties' => array( 'default' => false )
                ),
                array(
                    'id' => 'popups',
                    'name' => $this->translate('Domain'),
                    'type' => 'select',
                    'depends' => array(
                        array(
                            'id' => 'enabled',
                            'values' => array(true)
                        )
                    ),
                    'typeProperties' => array(
                        'bronto' => array( 'type' => 'popupManager' ),
                        'multiple' => true
                    )
                ),
                array(
                    'id' => 'createSubscribers',
                    'name' => $this->translate('Subscribe to Newsletter'),
                    'type' => 'boolean',
                    'required' => true,
                    'typeProperties' => array( 'default' => false ),
                    'depends' => array(
                        array( 'id' => 'enabled', 'values' => array(true) )
                    )
                )
            )
        ));

        $observer->getEndpoint()->addExtension(array(
            'id' => 'coupon_manager',
            'name' => $this->translate('Coupon Manager'),
            'fields' => array(
                array(
                    'id' => 'enabled',
                    'name' => $this->translate('Enabled'),
                    'type' => 'boolean',
                    'required' => true,
                    'typeProperties' => array( 'default' => false )
                ),
            )
        ));
    }

    /**
     * @see parent
     */
    public function advancedAdditional($observer)
    {
        $observer->getEndpoint()->addOptionToScript('event', 'moduleSettings', array(
            'id' => $this->getEndpointId(),
            'name' => $this->getEndpointName()
        ));
    }
}
