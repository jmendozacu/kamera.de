<?php
/**
 * This file was generated by the ConvertToLegacy class in bronto-legacy.
 * The purpose of the conversion was to maintain PSR-0 compliance while
 * the main development focuses on modern styles found in PSR-4.
 *
 * For the original:
 * @see src/Bronto/Magento/Notification/ExtensionAbstract.php
 */

abstract class Brontosoftware_Magento_Notification_ExtensionAbstract implements Brontosoftware_Magento_Connector_Discovery_AdvancedExtensionInterface
{
    protected $_settings;
    protected $_manager;
    protected $_connectorSettings;

    /**
     * @param Brontosoftware_Magento_Connector_SettingsInterface $connectorSettings
     * @param Brontosoftware_Magento_Notification_SettingsInterface $settings
     * @param Brontosoftware_Magento_Notification_ManagerInterface $manager
     */
    public function __construct(
        Brontosoftware_Magento_Connector_SettingsInterface $connectorSettings,
        Brontosoftware_Magento_Notification_SettingsInterface $settings,
        Brontosoftware_Magento_Notification_ManagerInterface $manager
    ) {
        $this->_settings = $settings;
        $this->_manager = $manager;
        $this->_connectorSettings = $connectorSettings;
    }

    /**
     * @see parent
     */
    public function getSortOrder()
    {
        return 5;
    }

    /**
     * @see parent
     */
    public function getEndpointId()
    {
        return 'notification';
    }

    /**
     * @see parent
     */
    public function getEndpointName()
    {
        return $this->translate('Notifications');
    }

    /**
     * @see parent
     */
    public function getEndpointIcon()
    {
        return 'mage-icon-messages';
    }

    /**
     * @see parent
     */
    public function gatherEndpoints($observer)
    {
        $registration = $observer->getRegistration();
        if ($this->_connectorSettings->isToggled($this->getEndpointId(), $registration->getScope(), $registration->getScopeId())) {
            $observer->getDiscovery()->addGroupHelper($this);
        }
    }

    /**
     * @see parent
     */
    public function endpointInfo($observer)
    {
        $observer->getEndpoint()->addExtension(array(
            'id' => 'settings',
            'name' => $this->translate('Settings'),
            'fields' => array(
                array(
                    'id' => 'notification_enabled',
                    'name' => $this->translate('Notification Enabled'),
                    'type' => 'boolean',
                    'typeProperties' => array( 'default' => false )
                ),
                array(
                    'id' => 'notification_email',
                    'name' => $this->translate('Notification Email'),
                    'type' => 'text',
                    'required' => true,
                    'depends' => array(
                        array( 'id' => 'notification_enabled', 'values' => array( true ) )
                    )
                )
            )
        ));
    }

    /**
     * @see parent
     */
    public function advancedAdditional($observer)
    {
        $registration = $observer->getRegistration();
        if ($this->_connectorSettings->isToggled($this->getEndpointId(), $registration->getScope(), $registration->getScopeId())) {
            $this->endpointInfo($observer);
        }
    }

    /**
     * Creates and updates or deliveries associated with any alert
     *
     * @param mixed $observer
     */
    public function createNotifications($observer)
    {
        $data = $observer->getScript()->getObject();
        $results = array();
        if (isset($data['data']['items'])) {
            $items = $data['data']['items'];
            $results = $this->_manager->createAnnouncements($items);
        }
        $observer->getScript()->setResults($results);
    }
}
