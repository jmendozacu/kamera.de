<?php
/**
 * This file was generated by the ConvertToLegacy class in bronto-legacy.
 * The purpose of the conversion was to maintain PSR-0 compliance while
 * the main development focuses on modern styles found in PSR-4.
 *
 * For the original:
 * @see src/Bronto/Magento/Email/ExtensionAbstract.php
 */

abstract class Brontosoftware_Magento_Email_ExtensionAbstract extends Brontosoftware_Magento_Connector_Discovery_AdvancedExtensionAbstract implements Brontosoftware_Magento_Connector_Discovery_GroupInterface, Brontosoftware_Magento_Connector_Discovery_TransformEventInterface
{
    protected $_triggerManager;
    protected $_eventManager;
    protected $_appEmulation;
    protected $_middleware;
    protected $_statuses;

    /**
     * @param Brontosoftware_Magento_Email_TriggerManagerInterface $triggerManager
     * @param Brontosoftware_Magento_Core_Sales_OrderStatusesInterface $statuses
     * @param Brontosoftware_Magento_Core_Store_ManagerInterface $storeManager
     * @param Brontosoftware_Magento_Connector_QueueManagerInterface $queueManager
     * @param Brontosoftware_Magento_Connector_SettingsInterface $connectorSettings
     * @param Brontosoftware_Magento_Connector_Event_HelperInterface $helper
     * @param Brontosoftware_Magento_Connector_Event_PlatformInterface $platform
     * @param Brontosoftware_Magento_Connector_Event_SourceInterface $source
     * @param Brontosoftware_Magento_Core_Event_ManagerInterface $eventManager
     */
    public function __construct(
        Brontosoftware_Magento_Email_TriggerManagerInterface $triggerManager,
        Brontosoftware_Magento_Core_Sales_OrderStatusesInterface $statuses,
        Brontosoftware_Magento_Core_Store_ManagerInterface $storeManager,
        Brontosoftware_Magento_Connector_QueueManagerInterface $queueManager,
        Brontosoftware_Magento_Connector_SettingsInterface $connectorSettings,
        Brontosoftware_Magento_Connector_Event_HelperInterface $helper,
        Brontosoftware_Magento_Connector_Event_PlatformInterface $platform,
        Brontosoftware_Magento_Connector_Event_SourceInterface $source,
        Brontosoftware_Magento_Connector_MiddlewareInterface $middleware,
        Brontosoftware_Magento_Core_Event_ManagerInterface $eventManager,
        Brontosoftware_Magento_Core_App_EmulationInterface $appEmulation
    ) {
        parent::__construct(
            $appEmulation,
            $storeManager,
            $queueManager,
            $connectorSettings,
            $helper,
            $platform,
            $source);
        $this->_middleware = $middleware;
        $this->_triggerManager = $triggerManager;
        $this->_statuses = $statuses;
        $this->_eventManager = $eventManager;
    }

    /**
     * @see parent
     */
    public function getSortOrder()
    {
        return 30;
    }

    /**
     * @see parent
     */
    public function getEndpointId()
    {
        return 'email';
    }

    /**
     * @see parent
     */
    public function getEndpointName()
    {
        return $this->translate('Messages');
    }

    /**
     * @see parent
     */
    public function getEndpointIcon()
    {
        return 'mage-icon-messages';
    }

    /**
     * Post setting sync to add reverse lookups
     *
     * @param mixed $observer
     * @return void
     */
    public function settingSync($observer)
    {
        $settings = $observer->getSettings();
        $scopeName = $observer->getScopeName();
        $scopeId = $observer->getScopeId();
        $this->_helper->createLookups($settings['objects'], $scopeName, $scopeId);
        $this->_helper->createReminders($settings['extensions'], $scopeName, $scopeId);
        foreach ($observer->getChildren() as $storeId) {
            $this->_helper->createLookups($settings['objects'], 'store', $storeId);
            $this->_helper->createReminders($settings['extensions'], 'store', $storeId);
        }
    }

    /**
     * Brontosoftware_Magento_Email_Trigger remote Reminder/Post-Purchase delivery flusher
     *
     * @param mixed $observer
     * @return void
     */
    public function triggerFlush($observer)
    {
        $registration = $observer->getScript()->getRegistration();
        $cleanup = $this->_helper->getCleanupThreshold($registration->getScope(), $registration->getScopeId());
        $this->_triggerManager->deleteExpiredItems($cleanup);
        if ($this->_triggerManager->hasItems($registration->getConnectorKey())) {
            $observer->getScript()->addScheduledTask('triggerFlush');
        }
    }

    /**
     * Sends any scheduled reminder or post purchase message
     *
     * @param mixed $observer
     */
    public function flushMessages($observer)
    {
        $results = array(
            'success' => 0,
            'error' => 0,
            'skipped' => 0
        );
        $events = array();
        $messageLookup = array();
        $data = $observer->getScript()->getObject();
        $registration = $observer->getScript()->getRegistration();
        $customerEmail = null;
        $sendNow = true;
        if (array_key_exists('customerEmail', $data['data'])) {
            $customerEmail = $data['data']['customerEmail'];
        }
        if (array_key_exists('sendNow', $data['data'])) {
            $sendNow = $data['data']['sendNow'];
        }
        foreach ($this->_triggerManager->getApplicableTriggers($registration->getConnectorKey(), $customerEmail) as $trigger) {
            $this->_appEmulation->startEnvironmentEmulation($trigger->getStoreId(), 'frontend', true);
            $model = $this->_helper->getTriggerModel($trigger);
            if (is_null($model)) {
                $this->_triggerManager->delete($trigger);
                $this->_appEmulation->stopEnvironmentEmulation();
                $results['skipped']++;
                continue;
            }
            if (array_key_exists($trigger->getMessageId(), $messageLookup)) {
                $message = $messageLookup[$trigger->getMessageId()];
            } else {
                $message = $this->_helper->getMessage($trigger->getMessageType(), $trigger->getMessageId(), $trigger->getStoreId());
                if (empty($message)) {
                    $this->_triggerManager->delete($trigger);
                    $this->_appEmulation->stopEnvironmentEmulation();
                    $results['skipped']++;
                    continue;
                }
                $messageLookup[$trigger->getMessageId()] = $message;
            }
            $source = $this->_triggerManager->createSource($trigger, $message);
            $action = $source->action($model);
            if (!empty($action)) {
                $event = $this->_platform->annotate($source, $model, $action, $trigger->getStoreId());

                if ($sendNow) {
                    if ($this->_platform->dispatch($event)) {
                        $this->_triggerManager->save($trigger->setSentMessage(1));
                        $results['success']++;
                    } else {
                        $results['error']++;
                    }
                } else {
                    $events[] = $event['data'];
                }
            } else {
                $this->_triggerManager->delete($trigger);
                $results['skipped']++;
            }
            $this->_appEmulation->stopEnvironmentEmulation();
        }
        $progresses = $sendNow ? $observer->getScript()->createProgresses($results) : $events;
        $observer->getScript()->setResults($progresses);
    }

    /**
     * @see parent
     */
    public function transformEvent($observer)
    {
        $transform = $observer->getTransform();
        $delivery = $transform->getDelivery();
        $event = $transform->getContext();
        $message = $event['message'];
        $context = $event['context'];
        $fields = $this->_helper->getExtraFields($message, $context, false);
        $delivery['fields'] = array_merge($delivery['fields'], $fields);
        $transform->setDelivery($delivery);
    }

    /**
     * @see parent
     */
    public function advancedAdditional($observer)
    {
        $options = array();
        foreach (array(15, 30, 60) as $number) {
            $options[] = array('id' => $number, 'name' => $number);
        }
        $observer->getEndpoint()->addExtension(array(
            'id' => 'settings',
            'name' => $this->translate('Settings'),
            'fields' => array(
                array(
                    'id' => 'sendThreshold',
                    'name' => $this->translate('Send Table Cleanup'),
                    'type' => 'select',
                    'typeProperties' => array(
                        'options' => $options,
                        'default' => 30
                    )
                )
            )
        ));

        $observer->getEndpoint()->addOptionToScript('event', 'jobName', array(
            'id' => $this->getEndpointId(),
            'name' => $this->translate('Add or Update All Mapped System Messages')
        ));

        $observer->getEndpoint()->addOptionToScript('event', 'moduleSettings', array(
            'id' => $this->getEndpointId(),
            'name' => $this->getEndpointName()
        ));

        $observer->getEndpoint()->addOptionToScript('event', 'jobName', array(
            'id' => 'triggerFlush',
            'name' => $this->translate('Search Queued Messages')
        ));

        $observer->getEndpoint()->addFieldToScript('event', array(
            'id' => 'customerEmail',
            'name' => $this->translate('Customer Email'),
            'type' => 'text',
            'depends' => array(
                array( 'id' => 'jobName', 'values' => array('triggerFlush') )
            )
        ));

        $observer->getEndpoint()->addFieldToScript('event', array(
            'id' => 'sendNow',
            'name' => $this->translate('Send Now'),
            'type' => 'boolean',
            'typeProperties' => array( 'default' => false ),
            'depends' => array(
                array( 'id' => 'jobName', 'values' => array('triggerFlush') )
            )
        ));

        $observer->getEndpoint()->addOptionToScript('test', 'jobName', array(
            'id' => 'test_' . $this->getEndpointId(),
            'name' => $this->translate('Message')
        ));

        $observer->getEndpoint()->addFieldToScript('test', array(
            'id' => 'importSelected',
            'name' => $this->translate('Select Message'),
            'type' => 'select',
            'position' => 3,
            'typeProperties' => array(
                'objectType' => array(
                    'extension' => 'email',
                    'id' => 'mapping'
                )
            ),
            'depends' => array(
                array(
                    'id' => 'jobName',
                    'values' => array( 'test_' . $this->getEndpointId() )
                )
            )
        ));
    }

    /**
     * @see parent
     */
    public function gatherEndpoints($observer)
    {
        $observer->getDiscovery()->addGroupHelper($this);
    }

    /**
     * @see parent
     */
    public function endpointInfo($observer)
    {
        $observer->getEndpoint()->addExtension(array(
            'id' => 'general',
            'name' => $this->translate('Settings'),
            'fields' => $this->_generalOptions()
        ));

        $observer->getEndpoint()->addSource(array(
            'id' => 'coupon_code',
            'name' => $this->translate('Specific Coupon'),
            'filters' => array(
                array(
                    'id' => 'name',
                    'name' => $this->translate('Name'),
                    'type' => 'text'
                )
            ),
            'fields' => array(
                array(
                    'id' => 'id',
                    'name' => $this->translate('ID'),
                    'width' => '2'
                ),
                array(
                    'id' => 'name',
                    'name' => $this->translate('Name'),
                    'width' => '4'
                ),
                array(
                    'id' => 'code',
                    'name' => $this->translate('Coupon Code'),
                    'width' => '4'
                ),
                array(
                    'id' => 'active',
                    'name' => $this->translate('Active'),
                    'width' => '2'
                )
            )
        ));

        $this->_transactionalSettings($observer);
        $this->_reminderSettings($observer);
        $this->_reviewSettings($observer);
    }

    /**
     * Sets the transactional settings for the email module
     *
     * @param mixed $observer
     * @return void
     */
    protected function _transactionalSettings($observer)
    {
        $senderOptions = $this->_senderOptions();
        $sendTypes = $this->_sendTypes();
        $observer->getEndpoint()->addCategory(array(
            'id' => 'transactional',
            'name' => $this->translate('System')
        ));
        $generalFields = $this->_generalOptions(array('enabled' => true, 'advanced' => true));
        $generalFields[] = array(
            'id' => 'magentoBcc',
            'name' => $this->translate('Sales Email Copy Send Type'),
            'type' => 'select',
            'typeProperties' => array(
              'default' => 'magento',
              'options' => array(
                  array('id' => 'magento', 'name' => $this->translate('Magento')),
                  array('id' => 'bronto', 'name' => $this->translate('Bronto'))
              )
            ),
            'depends' => array(
                array('id' => 'enabled', 'values' => array(true))
            )
        );
        $observer->getEndpoint()->addExtension(array(
            'id' => 'transactional',
            'category' => 'transactional',
            'name' => $this->translate('General'),
            'fields' => $generalFields
        ));

        $customTemplates = $this->_selectableCustomTemplates();
        $objectFields = $this->_generalOptions(array(
            'advanced' => true,
            'messageExtras' => true,
            'depends' => array(
                array(
                    'id' => 'sendType',
                    'values' => array( 'triggered', 'transactional')
                )
            )
        ));
        $objectFields[] = array(
            'id' => 'name',
            'name' => $this->translate('Name'),
            'type' => 'text',
            'required' => true,
        );
        $objectFields[] = array(
            'id' => 'configurationPath',
            'name' => $this->translate('Message Type'),
            'type' => 'select',
            'required' => true,
            'typeProperties' => array(
                'options' => $this->_selectableTemplates()
            ),
        );
        if (!empty($customTemplates)) {
            $objectFields[] = array(
                'id' => 'customContext',
                'name' => $this->translate("Template"),
                'type' => 'select',
                'typeProperties' => array(
                    'options' => $customTemplates,
                    'default' => 'defaultContext'
                ),
                'depends' => array(
                    array(
                        'id' => 'sendType',
                        'values' => array( 'triggered', 'transactional' )
                    )
                )
            );
        }
        $objectFields[] = array(
            'id' => 'messageId',
            'name' => $this->translate('Message'),
            'type' => 'select',
            'required' => true,
            'typeProperties' => array(
                'bronto' => array( 'type' => 'message' )
            ),
            'depends' => array(
                array(
                    'id' => 'sendType',
                    'values' => array( 'triggered', 'transactional')
                )
            )
        );
        $objectFields[] = array(
            'id' => 'sendType',
            'name' => $this->translate('Send Type'),
            'type' => 'select',
            'required' => true,
            'typeProperties' => array(
                'options' => $sendTypes,
                'default' => 'transactional'
            ),
        );
        $observer->getEndpoint()->addObject(array(
            'id' => 'mapping',
            'category' => 'transactional',
            'name' => $this->translate('Message'),
            'shortName' => $this->translate('Message'),
            'identifiable' => true,
            'fields' => $objectFields
        ));
    }

    /**
     * Sets the Reminder settings for the email module
     *
     * @param mixed $observer
     * @return void
     */
    protected function _reminderSettings($observer)
    {
        $emailIdentities = $this->_emailIdentities();
        $abandonUnits = $this->_abandonUnits();
        $targetAudience = $this->_targetAudience();
        $customerDefaults = array();
        foreach (array_slice($targetAudience, 0, 2) as $option) {
            $customerDefaults[] = $option['id'];
        }
        foreach (array('cart', 'wishlist') as $messageType) {
            $observer->getEndpoint()->addCategory(array(
                'id' => $messageType,
                'name' => $this->translate(ucfirst($messageType . 's'))
            ));
            $enabledDepends = array(
                array(
                    'id' => 'enabled',
                    'values' => array( true )
                )
            );
            $generalOptions = $this->_generalOptions(array(
                'enabled' => true,
                'advanced' => true
            ));
            $generalOptions[] = array(
                'id' => 'sender',
                'name' => $this->translate('Email Sender'),
                'type' => 'select',
                'depends' => $enabledDepends,
                'typeProperties' => array(
                    'options' => $emailIdentities,
                    'default' => 'general'
                )
            );
            if ($messageType == 'cart') {
                $generalOptions[] = array(
                    'id' => 'targetAudience',
                    'name' => $this->translate('Customer Group'),
                    'type' => 'select',
                    'depends' => $enabledDepends,
                    'typeProperties' => array(
                        'multiple' => true,
                        'options' => $targetAudience,
                        'default' => $customerDefaults
                    ),
                );
            }
            $generalOptions[] = array(
                'id' => 'exclusionLists',
                'name' => $this->translate('Exclusion Lists'),
                'type' => 'select',
                'depends' => $enabledDepends,
                'typeProperties' => array(
                    'multiple' => true,
                    'bronto' => array( 'type' => 'list' )
                )
            );
            $observer->getEndpoint()->addExtension(array(
                'id' => $messageType,
                'category' => $messageType,
                'name' => $this->translate('General'),
                'fields' => $generalOptions
            ));

            $messageFields = $this->_generalOptions(array(
                'enabled' => true,
                'advanced' => true,
                'messageExtras' => true
            ));
            $messageFields[] = array(
                'id' => 'messageId',
                'name' => $this->translate('Message'),
                'type' => 'select',
                'required' => true,
                'depends' => $enabledDepends,
                'typeProperties' => array(
                    'bronto' => array( 'type' => 'message' )
                )
            );
            if ($messageType == 'cart') {
                $messageFields[] = array(
                    'id' => 'targetAudience',
                    'name' => $this->translate('Customer Group'),
                    'type' => 'select',
                    'hasDefault' => true,
                    'advanced' => true,
                    'depends' => $enabledDepends,
                    'typeProperties' => array(
                        'multiple' => true,
                        'options' => $targetAudience,
                    )
                );
            }
            $messageFields[] = array(
                'id' => 'exclusionLists',
                'name' => $this->translate('Exclusion Lists'),
                'type' => 'select',
                'hasDefault' => true,
                'advanced' => true,
                'depends' => $enabledDepends,
                'typeProperties' => array(
                    'multiple' => true,
                    'bronto' => array( 'type' => 'list' )
                )
            );
            $messageFields[] = array(
                'id' => 'abandonUnit',
                'name' => $this->translate('Abandon Units'),
                'type' => 'select',
                'depends' => $enabledDepends,
                'typeProperties' => array(
                    'options' => $abandonUnits,
                    'default' => 'minutes'
                )
            );
            $messageFields[] = array(
                'id' => 'abandonPeriod',
                'name' => $this->translate('Abandon Period'),
                'type' => 'integer',
                'depends' => $enabledDepends,
                'typeProperties' => array(
                    'default' => 30
                )
            );
            $messageFields[] = array(
                'id' => 'sender',
                'name' => $this->translate('Email Sender'),
                'type' => 'select',
                'hasDefault' => true,
                'advanced' => true,
                'depends' => $enabledDepends,
                'typeProperties' => array(
                    'options' => $emailIdentities,
                )
            );
            foreach (range(1, 3) as $number) {
                $objectFields = $messageFields;
                if ($number == 1) {
                    $objectFields[] = array(
                        'id' => 'sendType',
                        'name' => $this->translate('Send Type'),
                        'type' => 'select',
                        'depends' => $enabledDepends,
                        'required' => true,
                        'typeProperties' => array(
                            'options' => array(
                                array( 'id' => 'transactional', 'name' => $this->translate('Transactional') ),
                                array( 'id' => 'triggered', 'name' => $this->translate('Marketing') )
                            ),
                            'default' => 'transactional'
                        )
                    );
                }
                $observer->getEndpoint()->addExtension(array(
                    'id' => $messageType . '_' . $number,
                    'category' => $messageType,
                    'name' => $this->translate("Message {$number}"),
                    'fields' => $objectFields
                ));
            }
        }
    }

    /**
     * Sets the Review settings for the email module
     *
     * @param mixed $observer
     * @return void
     */
    protected function _reviewSettings($observer)
    {
        $emailIdentities = $this->_emailIdentities();
        $targetAudience = $this->_targetAudience();
        $categories = $this->_productCategories();
        $customerDefaults = array();
        foreach (array_slice($targetAudience, 0, 2) as $option) {
            $customerDefaults[] = $option['id'];
        }
        $messages = array(
            'review' => 'Reviews',
            'reorder' => 'Reorders',
            'caretip' => 'Care Tips'
        );
        foreach ($messages as $messageType => $messageLabel) {
            $observer->getEndpoint()->addCategory(array(
                'id' => $messageType,
                'name' => $this->translate($messageLabel)
            ));
            $enabledDepends = array(
                array(
                    'id' => 'enabled',
                    'values' => array( true )
                )
            );
            $generalOptions = $this->_generalOptions(array(
                'enabled' => true,
                'advanced' => true,
                'messageExtras' => true
            ));
            $generalOptions[] = array(
                'id' => 'triggerStatus',
                'name' => $this->translate('Order Status'),
                'type' => 'select',
                'depends' => $enabledDepends,
                'typeProperties' => array(
                    'default' => 'complete',
                    'options' => $this->_statuses->getOptionArray()
                ),
            );
            $generalOptions[] = array(
                'id' => 'cancelStatus',
                'name' => $this->translate('Order Cancel Status'),
                'type' => 'select',
                'depends' => $enabledDepends,
                'typeProperties' => array(
                    'default' => array('holded', 'canceled', 'closed'),
                    'options' => $this->_statuses->getOptionArray(),
                    'multiple' => true
                )
            );
            if ($messageType == 'review') {
                $generalOptions[] = array(
                    'id' => 'messageId',
                    'name' => $this->translate('Message'),
                    'type' => 'select',
                    'typeProperties' => array(
                        'bronto' => array( 'type' => 'message' )
                    ),
                    'required' => true,
                    'depends' => $enabledDepends,
                );
            }
            $generalOptions[] = array(
                'id' => 'sendPeriod',
                'name' => $this->translate('Send Period'),
                'type' => 'integer',
                'depends' => $enabledDepends,
                'typeProperties' => array(
                    'default' => 14
                ),
            );
            if ($messageType == 'reorder') {
                $generalOptions[] = array(
                    'id' => 'multiply',
                    'name' => $this->translate('Send Period Per Unit'),
                    'type' => 'boolean',
                    'depends' => $enabledDepends,
                    'typeProperties' => array(
                        'default' => true
                    )
                );
            } else if ($messageType == 'review') {
                $generalOptions[] = array(
                    'id' => 'reviewForm',
                    'name' => $this->translate('Product URL Suffix'),
                    'type' => 'text',
                    'depends' => $enabledDepends,
                    'typeProperties' => array(
                        'default' => '#review-form'
                    )
                );
                $generalOptions[] = array(
                    'id' => 'categories',
                    'name' => $this->translate('Include Categories'),
                    'type' => 'select',
                    'depends' => $enabledDepends,
                    'typeProperties' => array(
                        'multiple' => true,
                        'options' => $categories
                    )
                );
            }
            $generalOptions[] = array(
                'id' => 'sender',
                'name' => $this->translate('Email Sender'),
                'type' => 'select',
                'depends' => $enabledDepends,
                'typeProperties' => array(
                    'options' => $emailIdentities,
                    'default' => 'general'
                )
            );
            $generalOptions[] = array(
                'id' => 'targetAudience',
                'name' => $this->translate('Customer Group'),
                'type' => 'select',
                'depends' => $enabledDepends,
                'typeProperties' => array(
                    'multiple' => true,
                    'options' => $targetAudience,
                    'default' => $customerDefaults
                ),
            );
            $generalOptions[] = array(
                'id' => 'exclusionLists',
                'name' => $this->translate('Exclusion Lists'),
                'type' => 'select',
                'depends' => $enabledDepends,
                'typeProperties' => array(
                    'multiple' => true,
                    'bronto' => array( 'type' => 'list' )
                )
            );
            $generalOptions[] = array(
                'id' => 'exclusionCategories',
                'name' => $this->translate('Exclusion Categories'),
                'type' => 'select',
                'depends' => $enabledDepends,
                'typeProperties' => array(
                    'multiple' => true,
                    'options' => $categories
                )
            );
            $observer->getEndpoint()->addExtension(array(
                'id' => $messageType,
                'category' => $messageType,
                'name' => $this->translate('General'),
                'fields' => $generalOptions
            ));

            if (in_array($messageType, array('reorder', 'caretip'))) {
                $messageFields = $generalOptions;
                foreach ($messageFields as &$field) {
                    $field['advanced'] = true;
                    $field['hasDefault'] = true;
                    unset($field['depends']);
                    unset($field['required']);
                    unset($field['typeProperties']['default']);
                    if (empty($field['typeProperties'])) {
                        unset($field['typeProperties']);
                    }
                }
                array_unshift($messageFields, array(
                    'id' => 'categories',
                    'name' => $this->translate('Include Categories'),
                    'type' => 'select',
                    'required' => true,
                    'typeProperties' => array(
                        'multiple' => true,
                        'options' => $categories
                    )
                ));
                if ($messageType == 'caretip') {
                    array_unshift($messageFields, array(
                        'id' => 'content',
                        'name' => $this->translate('Content'),
                        'type' => 'textarea',
                        'required' => true
                    ));
                }
                array_unshift($messageFields, array(
                    'id' => 'messageId',
                    'name' => $this->translate('Message'),
                    'type' => 'select',
                    'required' => true,
                    'typeProperties' => array(
                        'bronto' => array( 'type' => 'message' )
                    )
                ));
                array_unshift($messageFields, array(
                    'id' => 'name',
                    'name' => $this->translate('Name'),
                    'type' => 'text',
                    'required' => true
                ));
                $observer->getEndpoint()->addObject(array(
                    'id' => $messageType,
                    'category' => $messageType,
                    'name' => $this->translate('Message'),
                    'fields' => $messageFields
                ));
            }
        }
    }

    /**
     * Gets a collection of application abandons
     *
     * @return array
     */
    protected function _targetObjects()
    {
        return array(
            array(
                'id' => 'both',
                'name' => $this->translate('Both Carts and Wishlists'),
            ),
            array(
                'id' => 'cart',
                'name' => $this->translate('Carts Only')
            ),
            array(
                'id' => 'wishlist',
                'name' => $this->translate('Wishlists Only')
            )
        );
    }

    /**
     * Gets the general fields for each section
     *
     * @param boolean $advanced
     * @return array
     */
    protected function _generalOptions($options = array())
    {
        $generalFields = array();
        if (isset($options['enabled'])) {
            $field = array(
                'id' => 'enabled',
                'name' => $this->translate('Enabled'),
                'type' => 'boolean',
                'advanced' => isset($options['enabledAdvanced']),
                'hasDefault' => isset($options['enabledAdvanced']),
            );
            if (!isset($options['enabledAdvanced'])) {
                $field['typeProperties'] = array( 'default' => false);
            }
            if (isset($options['depends'])) {
                $field['depends'] = $options['depends'];
            }
            $generalFields[] = $field;
        }
        foreach ($this->_senderOptions() as $option) {
            $field = array(
                'id' => $option['id'],
                'name' => $option['name'],
                'type' => 'boolean',
                'advanced' => isset($options['advanced']),
                'hasDefault' => isset($options['advanced'])
            );
            if (!isset($options['advanced'])) {
                $field['typeProperties'] = array( 'default' => true );
            }
            if (isset($options['depends'])) {
                $field['depends'] = $options['depends'];
            }
            $generalFields[] = $field;
        }
        $otherOptions = array(
            'replyTo' => array('text', 'Reply-To'),
            'displaySymbol' => array('boolean', 'Display Currency Symbol')
        );
        foreach ($otherOptions as $id => $tuple) {
            list($type, $label) = $tuple;
            $field = array(
                'id' => $id,
                'name' => $this->translate($label),
                'type' => $type,
                'advanced' => isset($options['advanced']),
                'hasDefault' => isset($options['advanced'])
            );
            if (isset($options['depends'])) {
                $field['depends'] = $options['depends'];
            }
            if ($type == 'boolean' && !isset($options['advanced'])) {
                $field['typeProperties'] = array( 'default' => false );
            }
            $generalFields[] = $field;
        }
        if (isset($options['messageExtras'])) {
            $container = new Brontosoftware_Magento_Core_DataObject();
            $container->setFields(array());
            $container->setOptions($options);
            $this->_eventManager->dispatch('brontosoftware_email_message_extras', array(
                'container' => $container
            ));
            $generalFields = array_merge($generalFields, $container->getFields());
        }
        return $generalFields;
    }

    /**
     * Gets the sender flags for the discovery endpoint
     *
     * @return array
     */
    protected function _senderOptions()
    {
        return array(
            array(
                'id' => 'authentication',
                'name' => $this->translate('Sender Authentication')
            ),
            array(
                'id' => 'fatigueOverride',
                'name' => $this->translate('Fatigue Override')
            ),
            array(
                'id' => 'replyTracking',
                'name' => $this->translate('Reply Tracking')
            ),
        );
    }

    /**
     * Gets the abandon units
     *
     * @return array
     */
    protected function _abandonUnits()
    {
        return array(
            array(
                'id' => 'minutes',
                'name' => $this->translate('Minutes')
            ),
            array(
                'id' => 'hours',
                'name' => $this->translate('Hours')
            ),
            array(
                'id' => 'days',
                'name' => $this->translate('Days')
            )
        );
    }

    /**
     * Gets a Connector based collection for the Magento send types
     *
     * @return array
     */
    protected function _sendTypes()
    {
        return array(
            array(
                'id' => 'magento',
                'name' => $this->translate('Magento')
            ),
            array(
                'id' => 'nosend',
                'name' => $this->translate('Do Not Send')
            ),
            array(
                'id' => 'transactional',
                'name' => $this->translate('Transactional')
            ),
            array(
                'id' => 'triggered',
                'name' => $this->translate('Marketing')
            ),
        );
    }

    /**
     * Generates a list of selectable templates to import
     *
     * @return array
     */
    protected function _selectableTemplates()
    {
        $importOptions = array();
        foreach ($this->_defaultTemplates() as $template) {
            if ($template['group'] == 'Magento_Email' || !preg_match('/template$/', $template['value'])) {
                continue;
            }
            $importOptions[] = array(
                'id' => $template['value'],
                'name' => $template['label']
            );
        }
        return $importOptions;
    }

    /**
     * Transforms custom templates into Connector options
     *
     * @return array
     */
    protected function _selectableCustomTemplates()
    {
        $templateOptions = array(
            array(
                'id' => 'defaultContext',
                'name' => $this->translate('Configured Template')
            )
        );
        foreach ($this->_customTemplates() as $template) {
            $templateOptions[] = array(
                'id' => $template->getId(),
                'name' => $template->getTemplateCode()
            );
        }
        return $templateOptions;
    }

    /**
     * @see parent
     */
    protected function _sendTest($registration, $data)
    {
        $objects = array();
        if (array_key_exists('importSelected', $data)) {
            list($scopeName, $scopeId) = explode('.', $data['scopeId']);
            $storeId = $this->_middleware->defaultStoreId($scopeName, $scopeId);
            $mappingId = $data['importSelected'];
            $template = $this->_helper->getMessage('mapping', $mappingId, $storeId, true);
            if (!empty($template)) {
                $templateId = $this->_helper->getTemplateId($template);
                $message = $this->_helper->replaceTemplate($templateId, array('store' => $storeId));
                $objects[] = new Brontosoftware_DataObject(array(
                    'storeId' => $storeId,
                    'message' => $message,
                    'template' => $template
                ));
            }
        }
        return $objects;
    }

    /**
     * @see parent
     */
    protected function _sendHistorical($registration, $data)
    {
        $objects = array();
        $startTime = null;
        list($scopeName, $scopeId) = explode('.', $data['options']['scopeId']);
        $storeId = $this->_middleware->defaultStoreId($scopeName, $scopeId);
        $store = $this->_storeManager->getStore($storeId);
        $lookups = $this->_helper->getActiveObjects('mapping', $store, true);
        foreach ($lookups as $template) {
            $templateId = $this->_helper->getTemplateId($template);
            $message = $this->_helper->replaceTemplate($templateId, array('store' => $storeId));
            $objects[] = new Brontosoftware_DataObject(array(
                'storeId' => $storeId,
                'message' => $message,
                'template' => $template
            ));
        }
        return $objects;
    }

    /**
     * @see parent
     */
    protected function _applyLimitOffset($objects, $limit, $offset)
    {
        return $objects;
    }

    /**
     * Available templates on the server
     *
     * @return array
     */
    abstract protected function _defaultTemplates();

    /**
     * Gets the avaialble templates on the server
     *
     * @return array
     */
    abstract protected function _customTemplates();

    /**
     * Gets a collection of available email identities
     *
     * @return array
     */
    abstract protected function _emailIdentities();

    /**
     * Gets a collection of available customer groups
     *
     * @return array
     */
    abstract protected function _targetAudience();

    /**
     * Gets a collection of product categories
     *
     * @return array
     */
    abstract protected function _productCategories();
}
