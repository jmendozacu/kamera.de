<?php
/**
 * This file was generated by the ConvertToLegacy class in bronto-legacy.
 * The purpose of the conversion was to maintain PSR-0 compliance while
 * the main development focuses on modern styles found in PSR-4.
 *
 * For the original:
 * @see src/Bronto/Magento/Email/Redirector.php
 */

class Brontosoftware_Magento_Email_Redirector implements Brontosoftware_Magento_Connector_RedirectorInterface
{
    protected $_customerSession;
    protected $_quoteManagement;
    protected $_checkoutSession;
    protected $_storeManager;
    protected $_encrypt;
    protected $_helper;
    protected $_logger;

    /**
     * @param Brontosoftware_Magento_Core_Store_ManagerInterface $storeManager
     * @param Brontosoftware_Magento_Core_Customer_SessionInterface $customerSession
     * @param Brontosoftware_Magento_Core_Sales_QuoteManagementInterface $quoteManagement
     * @param Brontosoftware_Magento_Core_Sales_CheckoutSessionInterface $checkoutSession
     * @param Brontosoftware_Magento_Core_EncryptorInterface $encrypt
     * @param Brontosoftware_Magento_Email_SettingsInterface $helper
     * @param Brontosoftware_Magento_Core_Log_LoggerInterface $logger
     */
    public function __construct(
        Brontosoftware_Magento_Core_Store_ManagerInterface $storeManager,
        Brontosoftware_Magento_Core_Customer_SessionInterface $customerSession,
        Brontosoftware_Magento_Core_Sales_QuoteManagementInterface $quoteManagement,
        Brontosoftware_Magento_Core_Sales_CheckoutSessionInterface $checkoutSession,
        Brontosoftware_Magento_Core_EncryptorInterface $encrypt,
        Brontosoftware_Magento_Email_SettingsInterface $helper,
        Brontosoftware_Magento_Core_Log_LoggerInterface $logger
    ) {
        $this->_storeManager = $storeManager;
        $this->_customerSession = $customerSession;
        $this->_quoteManagement = $quoteManagement;
        $this->_checkoutSession = $checkoutSession;
        $this->_encrypt = $encrypt;
        $this->_helper = $helper;
        $this->_logger = $logger;
    }

    /**
     * @see parent
     */
    public function redirectPath($observer)
    {
        $request = $observer->getRequest();
        $modelId = $request->getParam('id', false);
        $modelType = $request->getParam('type', false);
        $store = $this->_storeManager->getStore(true);
        $redirectUrl = $store->getUrl('checkout/cart');
        if ($modelId && $modelType) {
            $modelId = $this->_encrypt->decrypt(base64_decode(urldecode($modelId)));
            $model = $this->_helper->loadModel($modelType, $modelId);
            if ($model) {
                $customerId = $this->_customerSession->getCustomer()->getId();
                $forceLogin = false;
                switch ($modelType) {
                case 'wishlist':
                    $store = $model->getStore();
                    $redirectUrl = $store->getUrl('wishlist');
                    $forceLogin = $customerId != $model->getCustomerId();
                    break;
                default:
                    $store = $this->_storeManager->getStore($model->getStoreId());
                    if ($model->getIsActive()) {
                        $redirectUrl = $store->getUrl('checkout/cart');
                        $this->_checkoutSession->resetCheckout();
                        if ($customerId && $model->getCustomerGroupId() == 0) {
                            if ($this->_checkoutSession->getQuoteId()) {
                                $cart = $this->_checkoutSession->getInitializedCart();
                                $sessionCart = $cart->getQuote();
                                if ($model->getId() != $sessionCart->getId()) {
                                    $sessionCart->merge($model);
                                    $cart->save();
                                }
                            } else {
                                try {
                                    $this->_quoteManagement->assignCustomer($model->getId(), $customerId, $store->getId());
                                } catch (Exception $e) {
                                    $this->_logger->critical($e);
                                }
                            }
                        } else if ($customerId && $model->getCustomerId() && $model->getCustomerId() != $customerId) {
                            $this->_customerSession->logout();
                            $forceLogin = true;
                        } else if ($model->getCustomerGroupId() == 0 && !$customerId) {
                            $cart = $this->_checkoutSession->getInitializedCart();
                            $sessionCart = $cart->getQuote();
                            if ($model->getId() != $sessionCart->getId()) {
                                $sessionCart->merge($model);
                                $cart->save();
                            }
                        } else if ($model->getCustomerId() && !$customerId) {
                            $forceLogin = true;
                        }
                    }
                }
                if ($forceLogin) {
                    $this->_customerSession->setBeforeAuthUrl($redirectUrl);
                    $redirectUrl = $store->getUrl('customer/account/login');
                }
            }
        }
        $observer->getRedirect()->unsetParams(array('type', 'id'));
        $observer->getRedirect()->setPath($redirectUrl);
    }
}
