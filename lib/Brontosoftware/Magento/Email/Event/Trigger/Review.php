<?php
/**
 * This file was generated by the ConvertToLegacy class in bronto-legacy.
 * The purpose of the conversion was to maintain PSR-0 compliance while
 * the main development focuses on modern styles found in PSR-4.
 *
 * For the original:
 * @see src/Bronto/Magento/Email/Event/Trigger/Review.php
 */

class Brontosoftware_Magento_Email_Event_Trigger_Review extends Brontosoftware_Magento_Email_Event_Trigger_OrderBasedAbstract
{
    protected $_urls;

    /**
     * @param Brontosoftware_Magento_Email_SettingsInterface $settings
     * @param Brontosoftware_Magento_Core_Directory_CurrencyManagerInterface $currencies
     * @param Brontosoftware_Magento_Email_TriggerInterface $trigger
     * @param Brontosoftware_Magento_Order_SettingsInterface $helper
     * @param Brontosoftware_Magento_Core_Config_ScopedInterface $config
     * @param Brontosoftware_Magento_Core_Sales_AddressRenderInterface $addressRender
     * @param Brontosoftware_Magento_Core_Store_UrlManagerInterface $urls
     * @param array $message
     */
    public function __construct(
        Brontosoftware_Magento_Email_SettingsInterface $settings,
        Brontosoftware_Magento_Core_Directory_CurrencyManagerInterface $currencies,
        Brontosoftware_Magento_Email_TriggerInterface $trigger,
        Brontosoftware_Magento_Order_SettingsInterface $helper,
        Brontosoftware_Magento_Core_Config_ScopedInterface $config,
        Brontosoftware_Magento_Core_Sales_AddressRenderInterface $addressRender,
        Brontosoftware_Magento_Core_Store_UrlManagerInterface $urls,
        array $message
    ) {
        parent::__construct(
            $settings,
            $currencies,
            $trigger,
            $helper,
            $config,
            $addressRender,
            $message);
        $this->_urls = $urls;
    }
    /**
     * @see parent
     */
    public function transform($order)
    {
        $store = $order->getStore();
        $delivery = $this->_createDelivery($order->getCustomerEmail(), $store);
        $fields = array_merge(
            $this->_extraFields(array('order' => $order)),
            $this->_createOrderFields($order, $store));
        $index = 1;
        $inclTax = (int)$this->_config->getValue(self::XML_PATH_PRICE_DISPLAY, 'store', $store);
        foreach ($this->_helper->getFlatItems($order) as $lineItem) {
            $product = $this->_helper->getVisibleProduct($lineItem);
            foreach ($product->getCategoryIds() as $categoryId) {
                if (isset($this->_message['exclusionCategories'])) {
                    if (in_array($categoryId, $this->_message['exclusionCategories'])) {
                        continue 2;
                    }
                }
                if (!empty($this->_message['categories'])) {
                    if (!in_array($categoryId, $this->_message['categories'])) {
                        continue 2;
                    }
                }
            }
            $reviewUrl = $this->_urls->getFrontendUrl($store, 'review/product/list', array(
                '_nosid' => true,
                'id' => $product->getId()
            ));
            $reviewUrl .= $this->_message['reviewForm'];
            $fields = array_merge($fields, $this->_createLineItemFields($lineItem, $inclTax, $index));
            $fields[] = $this->_createField("reviewUrl_{$index}", $reviewUrl);
            $index++;
        }
        $delivery['fields'] = $fields;
        return $delivery;
    }
}
