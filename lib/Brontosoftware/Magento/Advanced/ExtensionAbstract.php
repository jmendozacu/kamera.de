<?php
/**
 * This file was generated by the ConvertToLegacy class in bronto-legacy.
 * The purpose of the conversion was to maintain PSR-0 compliance while
 * the main development focuses on modern styles found in PSR-4.
 *
 * For the original:
 * @see src/Bronto/Magento/Advanced/ExtensionAbstract.php
 */

abstract class Brontosoftware_Magento_Advanced_ExtensionAbstract implements Brontosoftware_Magento_Connector_Discovery_ExtensionInterface, Brontosoftware_Magento_Connector_Discovery_GroupInterface
{
    protected $_eventManager;
    protected $_queueManager;
    protected $_platform;
    protected $_connectorSettings;
    protected $_appEmulation;
    protected $_config;
    protected $_connector;

    /**
     * @param Brontosoftware_Magento_Core_Config_FactoryInterface $config
     * @param Brontosoftware_Magento_Connector_ConnectorInterface $connector
     * @param Brontosoftware_Magento_Core_Event_ManagerInterface $eventManager
     * @param Brontosoftware_Magento_Connector_QueueManagerInterface $queueManager
     * @param Brontosoftware_Magento_Connector_Event_PlatformInterface $platform
     * @param Brontosoftware_Magento_Connector_SettingsInterface $connectorSettings
     * @param Brontosoftware_Magento_Core_App_EmulationInterface $appEmulation
     */
    public function __construct(
        Brontosoftware_Magento_Core_Config_FactoryInterface $config,
        Brontosoftware_Magento_Connector_ConnectorInterface $connector,
        Brontosoftware_Magento_Core_Event_ManagerInterface $eventManager,
        Brontosoftware_Magento_Connector_QueueManagerInterface $queueManager,
        Brontosoftware_Magento_Connector_Event_PlatformInterface $platform,
        Brontosoftware_Magento_Connector_SettingsInterface $connectorSettings,
        Brontosoftware_Magento_Core_App_EmulationInterface $appEmulation
    ) {
        $this->_config = $config;
        $this->_connector = $connector;
        $this->_eventManager = $eventManager;
        $this->_queueManager = $queueManager;
        $this->_platform = $platform;
        $this->_connectorSettings = $connectorSettings;
        $this->_appEmulation = $appEmulation;
    }

    /**
     * @see parent
     */
    public function getSortOrder()
    {
        return 9000;
    }

    /**
     * @see parent
     */
    public function getEndpointId()
    {
        return 'advanced';
    }

    /**
     * @see parent
     */
    public function getEndpointName()
    {
        return $this->translate('Advanced');
    }

    /**
     * @see parent
     */
    public function getEndpointIcon()
    {
        return 'mage-icon-advanced';
    }

    /**
     * Scans connector queue for applicable flushing
     *
     * @param mixed $observer
     * @return void
     */
    public function triggerFlush($observer)
    {
        $script = $observer->getScript();
        $siteId = $script->getRegistration()->getConnectorKey();
        if ($this->_queueManager->hasItems($siteId)) {
            $script->addScheduledTask('flushEvents_new');
        }
    }

    /**
     * Sends any events or flushed processed events
     *
     * @param mixed $observer
     * @return void
     */
    public function processEvents($observer)
    {
        $script = $observer->getScript()->getObject();
        $registration = $observer->getScript()->getRegistration();
        if (array_key_exists('eventIds', $script['data'])) {
            // This is needed for backward compat
            $this->_queueManager->deleteByIds($script['data']['eventIds']);
        }
        $results = array('success' => 0, 'error' => 0);
        $disabled = $this->_connectorSettings->isFlushDisabled($registration->getScope(), $registration->getScopeId()) && $script['data']['requestId'];
        if (!$disabled) {
            foreach ($this->_queueManager->getOldestEvents($registration->getConnectorKey()) as $event) {
                $data = unserialize($event->getEventData());
                if (array_key_exists('context', $data['data'])) {
                    if (array_key_exists('event', $data['data']['context'])) {
                        foreach ($data['data']['context']['event'] as $type => $context) {
                            $this->_appEmulation->startEnvironmentEmulation($context['storeId'], $context['area'], true);
                            $transform = new Brontosoftware_DataObject(array(
                                'context' => $context,
                                $type => $data['data'][$type]
                            ));
                            $this->_eventManager->dispatch("brontosoftware_connector_queue_{$type}_transform", array('transform' => $transform));
                            $transformed = $transform->toArray();
                            $data['data'][$type] = $transformed[$type];
                            $this->_appEmulation->stopEnvironmentEmulation();
                        }
                        unset($data['data']['context']['event']);
                        if (empty($data['data']['context'])) {
                            unset($data['data']['context']);
                        }
                    }
                }
                $key = 'error';
                if ($this->_platform->dispatch($data)) {
                    $key = 'success';
                    $this->_queueManager->delete($event);
                }
                $results[$key]++;
            }
        }
        $observer->getScript()->setProgress($results);
    }

    /**
     * Forwards any historical import to the module
     *
     * @param mixed $observer
     * @return void
     */
    public function processHistorical($observer)
    {
        $script = $observer->getScript()->getObject();
        $eventAreaName = "brontosoftware_connector_script_{$script['data']['type']}_historical";
        $this->_eventManager->dispatch($eventAreaName, array(
            'script' => $observer->getScript()
        ));
    }

    /**
     * Forwards any test imports to the handling module
     *
     * @param mixed $observer
     * @return void
     */
    public function processTest($observer)
    {
        $script = $observer->getScript()->getObject();
        $eventAreaName = "brontosoftware_connector_script_{$script['data']['type']}_test";
        $this->_eventManager->dispatch($eventAreaName, array(
            'script' => $observer->getScript()
        ));
    }

    /**
     * Passes along all of the configured settings
     *
     * @param mixed $observer
     * @return void
     */
    public function previewSettings($observer)
    {
        $registration = $observer->getScript()->getRegistration();
        $script = $observer->getScript()->getObject();
        $prefix = 'brontosoftware/';
        if ($script['data']['moduleSettings'] != 'all') {
            $prefix .= $script['data']['moduleSettings'] . '/';
        }
        $scopeTree = $this->_connector->scopeTree($registration);
        $observer->getScript()->setResults($this->_walkSettings($scopeTree, $prefix));
    }

    /**
     * Walk the registration tree for configured settings
     *
     * @param array $scopeTree
     * @param string $prefix
     * @param array $results
     * @return array
     */
    protected function _walkSettings($scopeTree, $prefix, $results = array())
    {
        $childSettings = array();
        list($scopeName, $scopeId) = explode('.', $scopeTree['id']);
        if ($scopeName != 'default') {
            $scopeName .= 's';
        }
        $data = $this->_config->getCollection()
            ->addFieldToFilter('path', array('like' => $prefix . '%'))
            ->addFieldToFilter('scope', array('eq' => $scopeName))
            ->addFieldToFilter('scope_id', array('eq' => $scopeId));
        foreach ($data as $config) {
            $pathParts = explode('/', $config->getPath());
            if (count($pathParts) < 5) {
                continue;
            }
            $collection =& $childSettings;
            foreach (array_slice($pathParts, 1, count($pathParts) - 2) as $part) {
                if (!array_key_exists($part, $collection)) {
                    $collection[$part] = array();
                }
                $collection =& $collection[$part];
            }
            $value = $config->getValue();
            if (preg_match('|/objects/|', $config->getPath())) {
                $value = @unserialize($value);
                if ($value === false) {
                    $value = $config->getValue();
                }
            }
            $collection[end($pathParts)] = $value;
        }
        if (!empty($childSettings)) {
            $results[] = array(
                'context' => array(
                    'name' => $scopeTree['name'],
                    'scope' => $scopeName,
                    'settings' => $childSettings
                )
            );
        }
        foreach ($scopeTree['children'] as $childScope) {
            $results = $this->_walkSettings($childScope, $prefix, $results);
        }
        return $results;
    }

    /**
     * @see parent
     */
    public function gatherEndpoints($observer)
    {
        $observer->getDiscovery()->addGroupHelper($this);
    }

    /**
     * @see parent
     */
    public function endpointInfo($observer)
    {
        $observer->getEndpoint()->addExtension(array(
            'id' => 'testImport',
            'name' => $this->translate('Test Mode'),
            'fields' => array(
                array(
                    'id' => 'enabled',
                    'name' => $this->translate('Pause Event Queuing'),
                    'type' => 'boolean',
                    'required' => true,
                    'typeProperties' => array(
                        'default' => $observer->getRegistration()->getEnvironment() == 'SANDBOX'
                    )
                ),
                array(
                    'id' => 'disableFlush',
                    'name' => $this->translate('Pause Event Processing'),
                    'type' => 'boolean',
                    'required' => true,
                    'allowedScopes' => [ $observer->getRegistration()->getScopeHash() ],
                    'depends' => array(
                        array( 'id' => 'enabled', 'values' => array( false ))
                    ),
                    'typeProperties' => array(
                        'default' => false
                    )
                )
            )
        ));

        $defaultFlush = 'flushEvents_new';
        $observer->getEndpoint()->addScript(array(
            'id' => 'event',
            'name' => $this->translate('Schedule Task'),
            'url' => 'brontosoftware/connector/script',
            'fields' => array(
                array(
                    'id' => 'jobName',
                    'name' => $this->translate('Type'),
                    'type' => 'select',
                    'typeProperties' => array(
                        'options' => array(
                            array(
                                'id' => $defaultFlush,
                                'name' => $this->translate('Process Import Queue')
                            ),
                            array(
                                'id' => 'previewSettings',
                                'name' => $this->translate('Preview Configured Settings')
                            )
                        ),
                        'default' => $defaultFlush
                    )
                ),
                array(
                    'id' => 'moduleSettings',
                    'name' => $this->translate('Module'),
                    'type' => 'select',
                    'depends' => array(
                        array( 'id' => 'jobName', 'values' => array( 'previewSettings' ) )
                    ),
                    'typeProperties' => array(
                        'default' => 'all',
                        'options' => array(
                            array( 'id' => 'all', 'name' => $this->translate('All Modules') )
                        )
                    )
                )
            )
        ));

        $observer->getEndpoint()->addScript(array(
            'id' => 'historical',
            'name' => $this->translate('Add to Import Queue'),
            'url' => 'brontosoftware/connector/script',
            'fields' => array(
                array(
                    'id' => 'jobName',
                    'name' => $this->translate('Type'),
                    'type' => 'select',
                    'position' => 0,
                    'typeProperties' => array(
                        'options' => array()
                    )
                ),
                array(
                    'id' => 'startTime',
                    'name' => $this->translate('Created After'),
                    'type' => 'date',
                    'position' => 10
                ),
                array(
                    'id' => 'endTime',
                    'name' => $this->translate('Created Before'),
                    'type' => 'date',
                    'position' => 20
                )
            )
        ));

        $observer->getEndpoint()->addScript(array(
            'id' => 'test',
            'name' => $this->translate('Test Import'),
            'url' => 'brontosoftware/connector/script',
            'fields' => array(
                array(
                    'id' => 'jobName',
                    'name' => $this->translate('Type'),
                    'type' => 'select',
                    'position' => 0,
                    'typeProperties' => array(
                        'options' => array()
                    )
                ),
                array(
                    'id' => 'performImport',
                    'name' => $this->translate('Import to Bronto'),
                    'type' => 'boolean',
                    'position' => 20,
                    'typeProperties' => array( 'default' => false )
                ),
            )
        ));

    }
}
